// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zk_prover.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zk_5fprover_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zk_5fprover_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zk_5fprover_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zk_5fprover_2eproto;
namespace zkprover {
namespace v1 {
class CancelRequest;
class CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
class CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class GenProofRequest;
class GenProofRequestDefaultTypeInternal;
extern GenProofRequestDefaultTypeInternal _GenProofRequest_default_instance_;
class GenProofResponse;
class GenProofResponseDefaultTypeInternal;
extern GenProofResponseDefaultTypeInternal _GenProofResponse_default_instance_;
class GetProofRequest;
class GetProofRequestDefaultTypeInternal;
extern GetProofRequestDefaultTypeInternal _GetProofRequest_default_instance_;
class GetProofResponse;
class GetProofResponseDefaultTypeInternal;
extern GetProofResponseDefaultTypeInternal _GetProofResponse_default_instance_;
class GetStatusRequest;
class GetStatusRequestDefaultTypeInternal;
extern GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
class GetStatusResponse;
class GetStatusResponseDefaultTypeInternal;
extern GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
class InputProver;
class InputProverDefaultTypeInternal;
extern InputProverDefaultTypeInternal _InputProver_default_instance_;
class InputProver_ContractsBytecodeEntry_DoNotUse;
class InputProver_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal;
extern InputProver_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal _InputProver_ContractsBytecodeEntry_DoNotUse_default_instance_;
class InputProver_DbEntry_DoNotUse;
class InputProver_DbEntry_DoNotUseDefaultTypeInternal;
extern InputProver_DbEntry_DoNotUseDefaultTypeInternal _InputProver_DbEntry_DoNotUse_default_instance_;
class Proof;
class ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class ProofB;
class ProofBDefaultTypeInternal;
extern ProofBDefaultTypeInternal _ProofB_default_instance_;
class PublicInputs;
class PublicInputsDefaultTypeInternal;
extern PublicInputsDefaultTypeInternal _PublicInputs_default_instance_;
class PublicInputsExtended;
class PublicInputsExtendedDefaultTypeInternal;
extern PublicInputsExtendedDefaultTypeInternal _PublicInputsExtended_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace v1
}  // namespace zkprover
PROTOBUF_NAMESPACE_OPEN
template<> ::zkprover::v1::CancelRequest* Arena::CreateMaybeMessage<::zkprover::v1::CancelRequest>(Arena*);
template<> ::zkprover::v1::CancelResponse* Arena::CreateMaybeMessage<::zkprover::v1::CancelResponse>(Arena*);
template<> ::zkprover::v1::GenProofRequest* Arena::CreateMaybeMessage<::zkprover::v1::GenProofRequest>(Arena*);
template<> ::zkprover::v1::GenProofResponse* Arena::CreateMaybeMessage<::zkprover::v1::GenProofResponse>(Arena*);
template<> ::zkprover::v1::GetProofRequest* Arena::CreateMaybeMessage<::zkprover::v1::GetProofRequest>(Arena*);
template<> ::zkprover::v1::GetProofResponse* Arena::CreateMaybeMessage<::zkprover::v1::GetProofResponse>(Arena*);
template<> ::zkprover::v1::GetStatusRequest* Arena::CreateMaybeMessage<::zkprover::v1::GetStatusRequest>(Arena*);
template<> ::zkprover::v1::GetStatusResponse* Arena::CreateMaybeMessage<::zkprover::v1::GetStatusResponse>(Arena*);
template<> ::zkprover::v1::InputProver* Arena::CreateMaybeMessage<::zkprover::v1::InputProver>(Arena*);
template<> ::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse* Arena::CreateMaybeMessage<::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse>(Arena*);
template<> ::zkprover::v1::InputProver_DbEntry_DoNotUse* Arena::CreateMaybeMessage<::zkprover::v1::InputProver_DbEntry_DoNotUse>(Arena*);
template<> ::zkprover::v1::Proof* Arena::CreateMaybeMessage<::zkprover::v1::Proof>(Arena*);
template<> ::zkprover::v1::ProofB* Arena::CreateMaybeMessage<::zkprover::v1::ProofB>(Arena*);
template<> ::zkprover::v1::PublicInputs* Arena::CreateMaybeMessage<::zkprover::v1::PublicInputs>(Arena*);
template<> ::zkprover::v1::PublicInputsExtended* Arena::CreateMaybeMessage<::zkprover::v1::PublicInputsExtended>(Arena*);
template<> ::zkprover::v1::Version* Arena::CreateMaybeMessage<::zkprover::v1::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zkprover {
namespace v1 {

enum GetStatusResponse_StatusProver : int {
  GetStatusResponse_StatusProver_STATUS_PROVER_UNSPECIFIED = 0,
  GetStatusResponse_StatusProver_STATUS_PROVER_BOOTING = 1,
  GetStatusResponse_StatusProver_STATUS_PROVER_COMPUTING = 2,
  GetStatusResponse_StatusProver_STATUS_PROVER_IDLE = 3,
  GetStatusResponse_StatusProver_STATUS_PROVER_HALT = 4,
  GetStatusResponse_StatusProver_GetStatusResponse_StatusProver_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetStatusResponse_StatusProver_GetStatusResponse_StatusProver_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetStatusResponse_StatusProver_IsValid(int value);
constexpr GetStatusResponse_StatusProver GetStatusResponse_StatusProver_StatusProver_MIN = GetStatusResponse_StatusProver_STATUS_PROVER_UNSPECIFIED;
constexpr GetStatusResponse_StatusProver GetStatusResponse_StatusProver_StatusProver_MAX = GetStatusResponse_StatusProver_STATUS_PROVER_HALT;
constexpr int GetStatusResponse_StatusProver_StatusProver_ARRAYSIZE = GetStatusResponse_StatusProver_StatusProver_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetStatusResponse_StatusProver_descriptor();
template<typename T>
inline const std::string& GetStatusResponse_StatusProver_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetStatusResponse_StatusProver>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetStatusResponse_StatusProver_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetStatusResponse_StatusProver_descriptor(), enum_t_value);
}
inline bool GetStatusResponse_StatusProver_Parse(
    const std::string& name, GetStatusResponse_StatusProver* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetStatusResponse_StatusProver>(
    GetStatusResponse_StatusProver_descriptor(), name, value);
}
enum GenProofResponse_ResultGenProof : int {
  GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_UNSPECIFIED = 0,
  GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_OK = 1,
  GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_ERROR = 2,
  GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_INTERNAL_ERROR = 3,
  GenProofResponse_ResultGenProof_GenProofResponse_ResultGenProof_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GenProofResponse_ResultGenProof_GenProofResponse_ResultGenProof_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GenProofResponse_ResultGenProof_IsValid(int value);
constexpr GenProofResponse_ResultGenProof GenProofResponse_ResultGenProof_ResultGenProof_MIN = GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_UNSPECIFIED;
constexpr GenProofResponse_ResultGenProof GenProofResponse_ResultGenProof_ResultGenProof_MAX = GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_INTERNAL_ERROR;
constexpr int GenProofResponse_ResultGenProof_ResultGenProof_ARRAYSIZE = GenProofResponse_ResultGenProof_ResultGenProof_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenProofResponse_ResultGenProof_descriptor();
template<typename T>
inline const std::string& GenProofResponse_ResultGenProof_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GenProofResponse_ResultGenProof>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GenProofResponse_ResultGenProof_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GenProofResponse_ResultGenProof_descriptor(), enum_t_value);
}
inline bool GenProofResponse_ResultGenProof_Parse(
    const std::string& name, GenProofResponse_ResultGenProof* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GenProofResponse_ResultGenProof>(
    GenProofResponse_ResultGenProof_descriptor(), name, value);
}
enum CancelResponse_ResultCancel : int {
  CancelResponse_ResultCancel_RESULT_CANCEL_UNSPECIFIED = 0,
  CancelResponse_ResultCancel_RESULT_CANCEL_OK = 1,
  CancelResponse_ResultCancel_RESULT_CANCEL_ERROR = 2,
  CancelResponse_ResultCancel_CancelResponse_ResultCancel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CancelResponse_ResultCancel_CancelResponse_ResultCancel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CancelResponse_ResultCancel_IsValid(int value);
constexpr CancelResponse_ResultCancel CancelResponse_ResultCancel_ResultCancel_MIN = CancelResponse_ResultCancel_RESULT_CANCEL_UNSPECIFIED;
constexpr CancelResponse_ResultCancel CancelResponse_ResultCancel_ResultCancel_MAX = CancelResponse_ResultCancel_RESULT_CANCEL_ERROR;
constexpr int CancelResponse_ResultCancel_ResultCancel_ARRAYSIZE = CancelResponse_ResultCancel_ResultCancel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelResponse_ResultCancel_descriptor();
template<typename T>
inline const std::string& CancelResponse_ResultCancel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CancelResponse_ResultCancel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CancelResponse_ResultCancel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CancelResponse_ResultCancel_descriptor(), enum_t_value);
}
inline bool CancelResponse_ResultCancel_Parse(
    const std::string& name, CancelResponse_ResultCancel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CancelResponse_ResultCancel>(
    CancelResponse_ResultCancel_descriptor(), name, value);
}
enum GetProofResponse_ResultGetProof : int {
  GetProofResponse_ResultGetProof_RESULT_GET_PROOF_UNSPECIFIED = 0,
  GetProofResponse_ResultGetProof_RESULT_GET_PROOF_COMPLETED_OK = 1,
  GetProofResponse_ResultGetProof_RESULT_GET_PROOF_ERROR = 2,
  GetProofResponse_ResultGetProof_RESULT_GET_PROOF_COMPLETED_ERROR = 3,
  GetProofResponse_ResultGetProof_RESULT_GET_PROOF_PENDING = 4,
  GetProofResponse_ResultGetProof_RESULT_GET_PROOF_INTERNAL_ERROR = 5,
  GetProofResponse_ResultGetProof_RESULT_GET_PROOF_CANCEL = 6,
  GetProofResponse_ResultGetProof_GetProofResponse_ResultGetProof_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetProofResponse_ResultGetProof_GetProofResponse_ResultGetProof_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetProofResponse_ResultGetProof_IsValid(int value);
constexpr GetProofResponse_ResultGetProof GetProofResponse_ResultGetProof_ResultGetProof_MIN = GetProofResponse_ResultGetProof_RESULT_GET_PROOF_UNSPECIFIED;
constexpr GetProofResponse_ResultGetProof GetProofResponse_ResultGetProof_ResultGetProof_MAX = GetProofResponse_ResultGetProof_RESULT_GET_PROOF_CANCEL;
constexpr int GetProofResponse_ResultGetProof_ResultGetProof_ARRAYSIZE = GetProofResponse_ResultGetProof_ResultGetProof_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetProofResponse_ResultGetProof_descriptor();
template<typename T>
inline const std::string& GetProofResponse_ResultGetProof_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetProofResponse_ResultGetProof>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetProofResponse_ResultGetProof_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetProofResponse_ResultGetProof_descriptor(), enum_t_value);
}
inline bool GetProofResponse_ResultGetProof_Parse(
    const std::string& name, GetProofResponse_ResultGetProof* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetProofResponse_ResultGetProof>(
    GetProofResponse_ResultGetProof_descriptor(), name, value);
}
// ===================================================================

class Version PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.Version) */ {
 public:
  inline Version() : Version(nullptr) {};
  virtual ~Version();

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(nullptr);
  }

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV001FieldNumber = 1,
  };
  // string v0_0_1 = 1;
  void clear_v0_0_1();
  const std::string& v0_0_1() const;
  void set_v0_0_1(const std::string& value);
  void set_v0_0_1(std::string&& value);
  void set_v0_0_1(const char* value);
  void set_v0_0_1(const char* value, size_t size);
  std::string* mutable_v0_0_1();
  std::string* release_v0_0_1();
  void set_allocated_v0_0_1(std::string* v0_0_1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_v0_0_1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_v0_0_1(
      std::string* v0_0_1);
  private:
  const std::string& _internal_v0_0_1() const;
  void _internal_set_v0_0_1(const std::string& value);
  std::string* _internal_mutable_v0_0_1();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v0_0_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class GetStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.GetStatusRequest) */ {
 public:
  inline GetStatusRequest() : GetStatusRequest(nullptr) {};
  virtual ~GetStatusRequest();

  GetStatusRequest(const GetStatusRequest& from);
  GetStatusRequest(GetStatusRequest&& from) noexcept
    : GetStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusRequest& operator=(const GetStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusRequest& operator=(GetStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusRequest*>(
               &_GetStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetStatusRequest& a, GetStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatusRequest* New() const final {
    return CreateMaybeMessage<GetStatusRequest>(nullptr);
  }

  GetStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusRequest& from);
  void MergeFrom(const GetStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.GetStatusRequest";
  }
  protected:
  explicit GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zkprover.v1.GetStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class GenProofRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.GenProofRequest) */ {
 public:
  inline GenProofRequest() : GenProofRequest(nullptr) {};
  virtual ~GenProofRequest();

  GenProofRequest(const GenProofRequest& from);
  GenProofRequest(GenProofRequest&& from) noexcept
    : GenProofRequest() {
    *this = ::std::move(from);
  }

  inline GenProofRequest& operator=(const GenProofRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenProofRequest& operator=(GenProofRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenProofRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenProofRequest* internal_default_instance() {
    return reinterpret_cast<const GenProofRequest*>(
               &_GenProofRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenProofRequest& a, GenProofRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenProofRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenProofRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenProofRequest* New() const final {
    return CreateMaybeMessage<GenProofRequest>(nullptr);
  }

  GenProofRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenProofRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenProofRequest& from);
  void MergeFrom(const GenProofRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenProofRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.GenProofRequest";
  }
  protected:
  explicit GenProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
  };
  // .zkprover.v1.InputProver input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::zkprover::v1::InputProver& input() const;
  ::zkprover::v1::InputProver* release_input();
  ::zkprover::v1::InputProver* mutable_input();
  void set_allocated_input(::zkprover::v1::InputProver* input);
  private:
  const ::zkprover::v1::InputProver& _internal_input() const;
  ::zkprover::v1::InputProver* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::zkprover::v1::InputProver* input);
  ::zkprover::v1::InputProver* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:zkprover.v1.GenProofRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zkprover::v1::InputProver* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {};
  virtual ~CancelRequest();

  CancelRequest(const CancelRequest& from);
  CancelRequest(CancelRequest&& from) noexcept
    : CancelRequest() {
    *this = ::std::move(from);
  }

  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
               &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelRequest& a, CancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelRequest* New() const final {
    return CreateMaybeMessage<CancelRequest>(nullptr);
  }

  CancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelRequest& from);
  void MergeFrom(const CancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.CancelRequest";
  }
  protected:
  explicit CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.CancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class GetProofRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.GetProofRequest) */ {
 public:
  inline GetProofRequest() : GetProofRequest(nullptr) {};
  virtual ~GetProofRequest();

  GetProofRequest(const GetProofRequest& from);
  GetProofRequest(GetProofRequest&& from) noexcept
    : GetProofRequest() {
    *this = ::std::move(from);
  }

  inline GetProofRequest& operator=(const GetProofRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProofRequest& operator=(GetProofRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProofRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProofRequest* internal_default_instance() {
    return reinterpret_cast<const GetProofRequest*>(
               &_GetProofRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetProofRequest& a, GetProofRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProofRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProofRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProofRequest* New() const final {
    return CreateMaybeMessage<GetProofRequest>(nullptr);
  }

  GetProofRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProofRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProofRequest& from);
  void MergeFrom(const GetProofRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProofRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.GetProofRequest";
  }
  protected:
  explicit GetProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 timeout = 2;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.GetProofRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.GetStatusResponse) */ {
 public:
  inline GetStatusResponse() : GetStatusResponse(nullptr) {};
  virtual ~GetStatusResponse();

  GetStatusResponse(const GetStatusResponse& from);
  GetStatusResponse(GetStatusResponse&& from) noexcept
    : GetStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetStatusResponse& operator=(const GetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResponse& operator=(GetStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatusResponse*>(
               &_GetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetStatusResponse& a, GetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatusResponse* New() const final {
    return CreateMaybeMessage<GetStatusResponse>(nullptr);
  }

  GetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusResponse& from);
  void MergeFrom(const GetStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.GetStatusResponse";
  }
  protected:
  explicit GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetStatusResponse_StatusProver StatusProver;
  static constexpr StatusProver STATUS_PROVER_UNSPECIFIED =
    GetStatusResponse_StatusProver_STATUS_PROVER_UNSPECIFIED;
  static constexpr StatusProver STATUS_PROVER_BOOTING =
    GetStatusResponse_StatusProver_STATUS_PROVER_BOOTING;
  static constexpr StatusProver STATUS_PROVER_COMPUTING =
    GetStatusResponse_StatusProver_STATUS_PROVER_COMPUTING;
  static constexpr StatusProver STATUS_PROVER_IDLE =
    GetStatusResponse_StatusProver_STATUS_PROVER_IDLE;
  static constexpr StatusProver STATUS_PROVER_HALT =
    GetStatusResponse_StatusProver_STATUS_PROVER_HALT;
  static inline bool StatusProver_IsValid(int value) {
    return GetStatusResponse_StatusProver_IsValid(value);
  }
  static constexpr StatusProver StatusProver_MIN =
    GetStatusResponse_StatusProver_StatusProver_MIN;
  static constexpr StatusProver StatusProver_MAX =
    GetStatusResponse_StatusProver_StatusProver_MAX;
  static constexpr int StatusProver_ARRAYSIZE =
    GetStatusResponse_StatusProver_StatusProver_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusProver_descriptor() {
    return GetStatusResponse_StatusProver_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusProver_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusProver>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusProver_Name.");
    return GetStatusResponse_StatusProver_Name(enum_t_value);
  }
  static inline bool StatusProver_Parse(const std::string& name,
      StatusProver* value) {
    return GetStatusResponse_StatusProver_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPendingRequestQueueIdsFieldNumber = 8,
    kLastComputedRequestIdFieldNumber = 2,
    kCurrentComputingRequestIdFieldNumber = 4,
    kVersionProtoFieldNumber = 6,
    kVersionServerFieldNumber = 7,
    kLastComputedEndTimeFieldNumber = 3,
    kCurrentComputingStartTimeFieldNumber = 5,
    kStateFieldNumber = 1,
  };
  // repeated string pending_request_queue_ids = 8;
  int pending_request_queue_ids_size() const;
  private:
  int _internal_pending_request_queue_ids_size() const;
  public:
  void clear_pending_request_queue_ids();
  const std::string& pending_request_queue_ids(int index) const;
  std::string* mutable_pending_request_queue_ids(int index);
  void set_pending_request_queue_ids(int index, const std::string& value);
  void set_pending_request_queue_ids(int index, std::string&& value);
  void set_pending_request_queue_ids(int index, const char* value);
  void set_pending_request_queue_ids(int index, const char* value, size_t size);
  std::string* add_pending_request_queue_ids();
  void add_pending_request_queue_ids(const std::string& value);
  void add_pending_request_queue_ids(std::string&& value);
  void add_pending_request_queue_ids(const char* value);
  void add_pending_request_queue_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pending_request_queue_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pending_request_queue_ids();
  private:
  const std::string& _internal_pending_request_queue_ids(int index) const;
  std::string* _internal_add_pending_request_queue_ids();
  public:

  // string last_computed_request_id = 2;
  void clear_last_computed_request_id();
  const std::string& last_computed_request_id() const;
  void set_last_computed_request_id(const std::string& value);
  void set_last_computed_request_id(std::string&& value);
  void set_last_computed_request_id(const char* value);
  void set_last_computed_request_id(const char* value, size_t size);
  std::string* mutable_last_computed_request_id();
  std::string* release_last_computed_request_id();
  void set_allocated_last_computed_request_id(std::string* last_computed_request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_computed_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_computed_request_id(
      std::string* last_computed_request_id);
  private:
  const std::string& _internal_last_computed_request_id() const;
  void _internal_set_last_computed_request_id(const std::string& value);
  std::string* _internal_mutable_last_computed_request_id();
  public:

  // string current_computing_request_id = 4;
  void clear_current_computing_request_id();
  const std::string& current_computing_request_id() const;
  void set_current_computing_request_id(const std::string& value);
  void set_current_computing_request_id(std::string&& value);
  void set_current_computing_request_id(const char* value);
  void set_current_computing_request_id(const char* value, size_t size);
  std::string* mutable_current_computing_request_id();
  std::string* release_current_computing_request_id();
  void set_allocated_current_computing_request_id(std::string* current_computing_request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_current_computing_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_current_computing_request_id(
      std::string* current_computing_request_id);
  private:
  const std::string& _internal_current_computing_request_id() const;
  void _internal_set_current_computing_request_id(const std::string& value);
  std::string* _internal_mutable_current_computing_request_id();
  public:

  // string version_proto = 6;
  void clear_version_proto();
  const std::string& version_proto() const;
  void set_version_proto(const std::string& value);
  void set_version_proto(std::string&& value);
  void set_version_proto(const char* value);
  void set_version_proto(const char* value, size_t size);
  std::string* mutable_version_proto();
  std::string* release_version_proto();
  void set_allocated_version_proto(std::string* version_proto);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version_proto();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version_proto(
      std::string* version_proto);
  private:
  const std::string& _internal_version_proto() const;
  void _internal_set_version_proto(const std::string& value);
  std::string* _internal_mutable_version_proto();
  public:

  // string version_server = 7;
  void clear_version_server();
  const std::string& version_server() const;
  void set_version_server(const std::string& value);
  void set_version_server(std::string&& value);
  void set_version_server(const char* value);
  void set_version_server(const char* value, size_t size);
  std::string* mutable_version_server();
  std::string* release_version_server();
  void set_allocated_version_server(std::string* version_server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version_server(
      std::string* version_server);
  private:
  const std::string& _internal_version_server() const;
  void _internal_set_version_server(const std::string& value);
  std::string* _internal_mutable_version_server();
  public:

  // uint64 last_computed_end_time = 3;
  void clear_last_computed_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_computed_end_time() const;
  void set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_computed_end_time() const;
  void _internal_set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 current_computing_start_time = 5;
  void clear_current_computing_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_computing_start_time() const;
  void set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_computing_start_time() const;
  void _internal_set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .zkprover.v1.GetStatusResponse.StatusProver state = 1;
  void clear_state();
  ::zkprover::v1::GetStatusResponse_StatusProver state() const;
  void set_state(::zkprover::v1::GetStatusResponse_StatusProver value);
  private:
  ::zkprover::v1::GetStatusResponse_StatusProver _internal_state() const;
  void _internal_set_state(::zkprover::v1::GetStatusResponse_StatusProver value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.GetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pending_request_queue_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_computed_request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_computing_request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_proto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_server_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_computed_end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_computing_start_time_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class GenProofResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.GenProofResponse) */ {
 public:
  inline GenProofResponse() : GenProofResponse(nullptr) {};
  virtual ~GenProofResponse();

  GenProofResponse(const GenProofResponse& from);
  GenProofResponse(GenProofResponse&& from) noexcept
    : GenProofResponse() {
    *this = ::std::move(from);
  }

  inline GenProofResponse& operator=(const GenProofResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenProofResponse& operator=(GenProofResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenProofResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenProofResponse* internal_default_instance() {
    return reinterpret_cast<const GenProofResponse*>(
               &_GenProofResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GenProofResponse& a, GenProofResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenProofResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenProofResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenProofResponse* New() const final {
    return CreateMaybeMessage<GenProofResponse>(nullptr);
  }

  GenProofResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenProofResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenProofResponse& from);
  void MergeFrom(const GenProofResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenProofResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.GenProofResponse";
  }
  protected:
  explicit GenProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GenProofResponse_ResultGenProof ResultGenProof;
  static constexpr ResultGenProof RESULT_GEN_PROOF_UNSPECIFIED =
    GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_UNSPECIFIED;
  static constexpr ResultGenProof RESULT_GEN_PROOF_OK =
    GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_OK;
  static constexpr ResultGenProof RESULT_GEN_PROOF_ERROR =
    GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_ERROR;
  static constexpr ResultGenProof RESULT_GEN_PROOF_INTERNAL_ERROR =
    GenProofResponse_ResultGenProof_RESULT_GEN_PROOF_INTERNAL_ERROR;
  static inline bool ResultGenProof_IsValid(int value) {
    return GenProofResponse_ResultGenProof_IsValid(value);
  }
  static constexpr ResultGenProof ResultGenProof_MIN =
    GenProofResponse_ResultGenProof_ResultGenProof_MIN;
  static constexpr ResultGenProof ResultGenProof_MAX =
    GenProofResponse_ResultGenProof_ResultGenProof_MAX;
  static constexpr int ResultGenProof_ARRAYSIZE =
    GenProofResponse_ResultGenProof_ResultGenProof_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultGenProof_descriptor() {
    return GenProofResponse_ResultGenProof_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultGenProof_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultGenProof>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultGenProof_Name.");
    return GenProofResponse_ResultGenProof_Name(enum_t_value);
  }
  static inline bool ResultGenProof_Parse(const std::string& name,
      ResultGenProof* value) {
    return GenProofResponse_ResultGenProof_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .zkprover.v1.GenProofResponse.ResultGenProof result = 2;
  void clear_result();
  ::zkprover::v1::GenProofResponse_ResultGenProof result() const;
  void set_result(::zkprover::v1::GenProofResponse_ResultGenProof value);
  private:
  ::zkprover::v1::GenProofResponse_ResultGenProof _internal_result() const;
  void _internal_set_result(::zkprover::v1::GenProofResponse_ResultGenProof value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.GenProofResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {};
  virtual ~CancelResponse();

  CancelResponse(const CancelResponse& from);
  CancelResponse(CancelResponse&& from) noexcept
    : CancelResponse() {
    *this = ::std::move(from);
  }

  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
               &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CancelResponse& a, CancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelResponse* New() const final {
    return CreateMaybeMessage<CancelResponse>(nullptr);
  }

  CancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelResponse& from);
  void MergeFrom(const CancelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.CancelResponse";
  }
  protected:
  explicit CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CancelResponse_ResultCancel ResultCancel;
  static constexpr ResultCancel RESULT_CANCEL_UNSPECIFIED =
    CancelResponse_ResultCancel_RESULT_CANCEL_UNSPECIFIED;
  static constexpr ResultCancel RESULT_CANCEL_OK =
    CancelResponse_ResultCancel_RESULT_CANCEL_OK;
  static constexpr ResultCancel RESULT_CANCEL_ERROR =
    CancelResponse_ResultCancel_RESULT_CANCEL_ERROR;
  static inline bool ResultCancel_IsValid(int value) {
    return CancelResponse_ResultCancel_IsValid(value);
  }
  static constexpr ResultCancel ResultCancel_MIN =
    CancelResponse_ResultCancel_ResultCancel_MIN;
  static constexpr ResultCancel ResultCancel_MAX =
    CancelResponse_ResultCancel_ResultCancel_MAX;
  static constexpr int ResultCancel_ARRAYSIZE =
    CancelResponse_ResultCancel_ResultCancel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultCancel_descriptor() {
    return CancelResponse_ResultCancel_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultCancel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultCancel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultCancel_Name.");
    return CancelResponse_ResultCancel_Name(enum_t_value);
  }
  static inline bool ResultCancel_Parse(const std::string& name,
      ResultCancel* value) {
    return CancelResponse_ResultCancel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .zkprover.v1.CancelResponse.ResultCancel result = 1;
  void clear_result();
  ::zkprover::v1::CancelResponse_ResultCancel result() const;
  void set_result(::zkprover::v1::CancelResponse_ResultCancel value);
  private:
  ::zkprover::v1::CancelResponse_ResultCancel _internal_result() const;
  void _internal_set_result(::zkprover::v1::CancelResponse_ResultCancel value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.CancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class GetProofResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.GetProofResponse) */ {
 public:
  inline GetProofResponse() : GetProofResponse(nullptr) {};
  virtual ~GetProofResponse();

  GetProofResponse(const GetProofResponse& from);
  GetProofResponse(GetProofResponse&& from) noexcept
    : GetProofResponse() {
    *this = ::std::move(from);
  }

  inline GetProofResponse& operator=(const GetProofResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProofResponse& operator=(GetProofResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProofResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProofResponse* internal_default_instance() {
    return reinterpret_cast<const GetProofResponse*>(
               &_GetProofResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetProofResponse& a, GetProofResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProofResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProofResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProofResponse* New() const final {
    return CreateMaybeMessage<GetProofResponse>(nullptr);
  }

  GetProofResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProofResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProofResponse& from);
  void MergeFrom(const GetProofResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProofResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.GetProofResponse";
  }
  protected:
  explicit GetProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetProofResponse_ResultGetProof ResultGetProof;
  static constexpr ResultGetProof RESULT_GET_PROOF_UNSPECIFIED =
    GetProofResponse_ResultGetProof_RESULT_GET_PROOF_UNSPECIFIED;
  static constexpr ResultGetProof RESULT_GET_PROOF_COMPLETED_OK =
    GetProofResponse_ResultGetProof_RESULT_GET_PROOF_COMPLETED_OK;
  static constexpr ResultGetProof RESULT_GET_PROOF_ERROR =
    GetProofResponse_ResultGetProof_RESULT_GET_PROOF_ERROR;
  static constexpr ResultGetProof RESULT_GET_PROOF_COMPLETED_ERROR =
    GetProofResponse_ResultGetProof_RESULT_GET_PROOF_COMPLETED_ERROR;
  static constexpr ResultGetProof RESULT_GET_PROOF_PENDING =
    GetProofResponse_ResultGetProof_RESULT_GET_PROOF_PENDING;
  static constexpr ResultGetProof RESULT_GET_PROOF_INTERNAL_ERROR =
    GetProofResponse_ResultGetProof_RESULT_GET_PROOF_INTERNAL_ERROR;
  static constexpr ResultGetProof RESULT_GET_PROOF_CANCEL =
    GetProofResponse_ResultGetProof_RESULT_GET_PROOF_CANCEL;
  static inline bool ResultGetProof_IsValid(int value) {
    return GetProofResponse_ResultGetProof_IsValid(value);
  }
  static constexpr ResultGetProof ResultGetProof_MIN =
    GetProofResponse_ResultGetProof_ResultGetProof_MIN;
  static constexpr ResultGetProof ResultGetProof_MAX =
    GetProofResponse_ResultGetProof_ResultGetProof_MAX;
  static constexpr int ResultGetProof_ARRAYSIZE =
    GetProofResponse_ResultGetProof_ResultGetProof_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultGetProof_descriptor() {
    return GetProofResponse_ResultGetProof_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultGetProof_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultGetProof>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultGetProof_Name.");
    return GetProofResponse_ResultGetProof_Name(enum_t_value);
  }
  static inline bool ResultGetProof_Parse(const std::string& name,
      ResultGetProof* value) {
    return GetProofResponse_ResultGetProof_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResultStringFieldNumber = 5,
    kProofFieldNumber = 2,
    kPublicFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string result_string = 5;
  void clear_result_string();
  const std::string& result_string() const;
  void set_result_string(const std::string& value);
  void set_result_string(std::string&& value);
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  std::string* mutable_result_string();
  std::string* release_result_string();
  void set_allocated_result_string(std::string* result_string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result_string(
      std::string* result_string);
  private:
  const std::string& _internal_result_string() const;
  void _internal_set_result_string(const std::string& value);
  std::string* _internal_mutable_result_string();
  public:

  // .zkprover.v1.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::zkprover::v1::Proof& proof() const;
  ::zkprover::v1::Proof* release_proof();
  ::zkprover::v1::Proof* mutable_proof();
  void set_allocated_proof(::zkprover::v1::Proof* proof);
  private:
  const ::zkprover::v1::Proof& _internal_proof() const;
  ::zkprover::v1::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::zkprover::v1::Proof* proof);
  ::zkprover::v1::Proof* unsafe_arena_release_proof();

  // .zkprover.v1.PublicInputsExtended public = 3;
  bool has_public_() const;
  private:
  bool _internal_has_public_() const;
  public:
  void clear_public_();
  const ::zkprover::v1::PublicInputsExtended& public_() const;
  ::zkprover::v1::PublicInputsExtended* release_public_();
  ::zkprover::v1::PublicInputsExtended* mutable_public_();
  void set_allocated_public_(::zkprover::v1::PublicInputsExtended* public_);
  private:
  const ::zkprover::v1::PublicInputsExtended& _internal_public_() const;
  ::zkprover::v1::PublicInputsExtended* _internal_mutable_public_();
  public:
  void unsafe_arena_set_allocated_public_(
      ::zkprover::v1::PublicInputsExtended* public_);
  ::zkprover::v1::PublicInputsExtended* unsafe_arena_release_public_();

  // .zkprover.v1.GetProofResponse.ResultGetProof result = 4;
  void clear_result();
  ::zkprover::v1::GetProofResponse_ResultGetProof result() const;
  void set_result(::zkprover::v1::GetProofResponse_ResultGetProof value);
  private:
  ::zkprover::v1::GetProofResponse_ResultGetProof _internal_result() const;
  void _internal_set_result(::zkprover::v1::GetProofResponse_ResultGetProof value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.GetProofResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_string_;
  ::zkprover::v1::Proof* proof_;
  ::zkprover::v1::PublicInputsExtended* public__;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class PublicInputs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.PublicInputs) */ {
 public:
  inline PublicInputs() : PublicInputs(nullptr) {};
  virtual ~PublicInputs();

  PublicInputs(const PublicInputs& from);
  PublicInputs(PublicInputs&& from) noexcept
    : PublicInputs() {
    *this = ::std::move(from);
  }

  inline PublicInputs& operator=(const PublicInputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicInputs& operator=(PublicInputs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicInputs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicInputs* internal_default_instance() {
    return reinterpret_cast<const PublicInputs*>(
               &_PublicInputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublicInputs& a, PublicInputs& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicInputs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicInputs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicInputs* New() const final {
    return CreateMaybeMessage<PublicInputs>(nullptr);
  }

  PublicInputs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicInputs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicInputs& from);
  void MergeFrom(const PublicInputs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicInputs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.PublicInputs";
  }
  protected:
  explicit PublicInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldStateRootFieldNumber = 1,
    kOldLocalExitRootFieldNumber = 2,
    kNewStateRootFieldNumber = 3,
    kNewLocalExitRootFieldNumber = 4,
    kSequencerAddrFieldNumber = 5,
    kBatchHashDataFieldNumber = 6,
    kAggregatorAddrFieldNumber = 9,
    kEthTimestampFieldNumber = 8,
    kChainIdFieldNumber = 10,
    kBatchNumFieldNumber = 7,
  };
  // string old_state_root = 1;
  void clear_old_state_root();
  const std::string& old_state_root() const;
  void set_old_state_root(const std::string& value);
  void set_old_state_root(std::string&& value);
  void set_old_state_root(const char* value);
  void set_old_state_root(const char* value, size_t size);
  std::string* mutable_old_state_root();
  std::string* release_old_state_root();
  void set_allocated_old_state_root(std::string* old_state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_old_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_old_state_root(
      std::string* old_state_root);
  private:
  const std::string& _internal_old_state_root() const;
  void _internal_set_old_state_root(const std::string& value);
  std::string* _internal_mutable_old_state_root();
  public:

  // string old_local_exit_root = 2;
  void clear_old_local_exit_root();
  const std::string& old_local_exit_root() const;
  void set_old_local_exit_root(const std::string& value);
  void set_old_local_exit_root(std::string&& value);
  void set_old_local_exit_root(const char* value);
  void set_old_local_exit_root(const char* value, size_t size);
  std::string* mutable_old_local_exit_root();
  std::string* release_old_local_exit_root();
  void set_allocated_old_local_exit_root(std::string* old_local_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_old_local_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_old_local_exit_root(
      std::string* old_local_exit_root);
  private:
  const std::string& _internal_old_local_exit_root() const;
  void _internal_set_old_local_exit_root(const std::string& value);
  std::string* _internal_mutable_old_local_exit_root();
  public:

  // string new_state_root = 3;
  void clear_new_state_root();
  const std::string& new_state_root() const;
  void set_new_state_root(const std::string& value);
  void set_new_state_root(std::string&& value);
  void set_new_state_root(const char* value);
  void set_new_state_root(const char* value, size_t size);
  std::string* mutable_new_state_root();
  std::string* release_new_state_root();
  void set_allocated_new_state_root(std::string* new_state_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_state_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_state_root(
      std::string* new_state_root);
  private:
  const std::string& _internal_new_state_root() const;
  void _internal_set_new_state_root(const std::string& value);
  std::string* _internal_mutable_new_state_root();
  public:

  // string new_local_exit_root = 4;
  void clear_new_local_exit_root();
  const std::string& new_local_exit_root() const;
  void set_new_local_exit_root(const std::string& value);
  void set_new_local_exit_root(std::string&& value);
  void set_new_local_exit_root(const char* value);
  void set_new_local_exit_root(const char* value, size_t size);
  std::string* mutable_new_local_exit_root();
  std::string* release_new_local_exit_root();
  void set_allocated_new_local_exit_root(std::string* new_local_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_local_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_local_exit_root(
      std::string* new_local_exit_root);
  private:
  const std::string& _internal_new_local_exit_root() const;
  void _internal_set_new_local_exit_root(const std::string& value);
  std::string* _internal_mutable_new_local_exit_root();
  public:

  // string sequencer_addr = 5;
  void clear_sequencer_addr();
  const std::string& sequencer_addr() const;
  void set_sequencer_addr(const std::string& value);
  void set_sequencer_addr(std::string&& value);
  void set_sequencer_addr(const char* value);
  void set_sequencer_addr(const char* value, size_t size);
  std::string* mutable_sequencer_addr();
  std::string* release_sequencer_addr();
  void set_allocated_sequencer_addr(std::string* sequencer_addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sequencer_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sequencer_addr(
      std::string* sequencer_addr);
  private:
  const std::string& _internal_sequencer_addr() const;
  void _internal_set_sequencer_addr(const std::string& value);
  std::string* _internal_mutable_sequencer_addr();
  public:

  // string batch_hash_data = 6;
  void clear_batch_hash_data();
  const std::string& batch_hash_data() const;
  void set_batch_hash_data(const std::string& value);
  void set_batch_hash_data(std::string&& value);
  void set_batch_hash_data(const char* value);
  void set_batch_hash_data(const char* value, size_t size);
  std::string* mutable_batch_hash_data();
  std::string* release_batch_hash_data();
  void set_allocated_batch_hash_data(std::string* batch_hash_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_batch_hash_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_batch_hash_data(
      std::string* batch_hash_data);
  private:
  const std::string& _internal_batch_hash_data() const;
  void _internal_set_batch_hash_data(const std::string& value);
  std::string* _internal_mutable_batch_hash_data();
  public:

  // string aggregator_addr = 9;
  void clear_aggregator_addr();
  const std::string& aggregator_addr() const;
  void set_aggregator_addr(const std::string& value);
  void set_aggregator_addr(std::string&& value);
  void set_aggregator_addr(const char* value);
  void set_aggregator_addr(const char* value, size_t size);
  std::string* mutable_aggregator_addr();
  std::string* release_aggregator_addr();
  void set_allocated_aggregator_addr(std::string* aggregator_addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aggregator_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aggregator_addr(
      std::string* aggregator_addr);
  private:
  const std::string& _internal_aggregator_addr() const;
  void _internal_set_aggregator_addr(const std::string& value);
  std::string* _internal_mutable_aggregator_addr();
  public:

  // uint64 eth_timestamp = 8;
  void clear_eth_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 eth_timestamp() const;
  void set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_eth_timestamp() const;
  void _internal_set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 chain_id = 10;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 batch_num = 7;
  void clear_batch_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_num() const;
  void set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_num() const;
  void _internal_set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.PublicInputs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_state_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_local_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_state_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_local_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequencer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_hash_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aggregator_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 eth_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class ProofB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.ProofB) */ {
 public:
  inline ProofB() : ProofB(nullptr) {};
  virtual ~ProofB();

  ProofB(const ProofB& from);
  ProofB(ProofB&& from) noexcept
    : ProofB() {
    *this = ::std::move(from);
  }

  inline ProofB& operator=(const ProofB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofB& operator=(ProofB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProofB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProofB* internal_default_instance() {
    return reinterpret_cast<const ProofB*>(
               &_ProofB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProofB& a, ProofB& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProofB* New() const final {
    return CreateMaybeMessage<ProofB>(nullptr);
  }

  ProofB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProofB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProofB& from);
  void MergeFrom(const ProofB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.ProofB";
  }
  protected:
  explicit ProofB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofsFieldNumber = 1,
  };
  // repeated string proofs = 1;
  int proofs_size() const;
  private:
  int _internal_proofs_size() const;
  public:
  void clear_proofs();
  const std::string& proofs(int index) const;
  std::string* mutable_proofs(int index);
  void set_proofs(int index, const std::string& value);
  void set_proofs(int index, std::string&& value);
  void set_proofs(int index, const char* value);
  void set_proofs(int index, const char* value, size_t size);
  std::string* add_proofs();
  void add_proofs(const std::string& value);
  void add_proofs(std::string&& value);
  void add_proofs(const char* value);
  void add_proofs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proofs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proofs();
  private:
  const std::string& _internal_proofs(int index) const;
  std::string* _internal_add_proofs();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.ProofB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proofs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class Proof PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.Proof) */ {
 public:
  inline Proof() : Proof(nullptr) {};
  virtual ~Proof();

  Proof(const Proof& from);
  Proof(Proof&& from) noexcept
    : Proof() {
    *this = ::std::move(from);
  }

  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proof& operator=(Proof&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
               &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Proof& a, Proof& b) {
    a.Swap(&b);
  }
  inline void Swap(Proof* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proof* New() const final {
    return CreateMaybeMessage<Proof>(nullptr);
  }

  Proof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proof& from);
  void MergeFrom(const Proof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.Proof";
  }
  protected:
  explicit Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofAFieldNumber = 1,
    kProofBFieldNumber = 2,
    kProofCFieldNumber = 3,
  };
  // repeated string proof_a = 1;
  int proof_a_size() const;
  private:
  int _internal_proof_a_size() const;
  public:
  void clear_proof_a();
  const std::string& proof_a(int index) const;
  std::string* mutable_proof_a(int index);
  void set_proof_a(int index, const std::string& value);
  void set_proof_a(int index, std::string&& value);
  void set_proof_a(int index, const char* value);
  void set_proof_a(int index, const char* value, size_t size);
  std::string* add_proof_a();
  void add_proof_a(const std::string& value);
  void add_proof_a(std::string&& value);
  void add_proof_a(const char* value);
  void add_proof_a(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proof_a() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proof_a();
  private:
  const std::string& _internal_proof_a(int index) const;
  std::string* _internal_add_proof_a();
  public:

  // repeated .zkprover.v1.ProofB proof_b = 2;
  int proof_b_size() const;
  private:
  int _internal_proof_b_size() const;
  public:
  void clear_proof_b();
  ::zkprover::v1::ProofB* mutable_proof_b(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::v1::ProofB >*
      mutable_proof_b();
  private:
  const ::zkprover::v1::ProofB& _internal_proof_b(int index) const;
  ::zkprover::v1::ProofB* _internal_add_proof_b();
  public:
  const ::zkprover::v1::ProofB& proof_b(int index) const;
  ::zkprover::v1::ProofB* add_proof_b();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::v1::ProofB >&
      proof_b() const;

  // repeated string proof_c = 3;
  int proof_c_size() const;
  private:
  int _internal_proof_c_size() const;
  public:
  void clear_proof_c();
  const std::string& proof_c(int index) const;
  std::string* mutable_proof_c(int index);
  void set_proof_c(int index, const std::string& value);
  void set_proof_c(int index, std::string&& value);
  void set_proof_c(int index, const char* value);
  void set_proof_c(int index, const char* value, size_t size);
  std::string* add_proof_c();
  void add_proof_c(const std::string& value);
  void add_proof_c(std::string&& value);
  void add_proof_c(const char* value);
  void add_proof_c(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proof_c() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proof_c();
  private:
  const std::string& _internal_proof_c(int index) const;
  std::string* _internal_add_proof_c();
  public:

  // @@protoc_insertion_point(class_scope:zkprover.v1.Proof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proof_a_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::v1::ProofB > proof_b_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proof_c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class InputProver_DbEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InputProver_DbEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InputProver_DbEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InputProver_DbEntry_DoNotUse();
  InputProver_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InputProver_DbEntry_DoNotUse& other);
  static const InputProver_DbEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InputProver_DbEntry_DoNotUse*>(&_InputProver_DbEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.v1.InputProver.DbEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.v1.InputProver.DbEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class InputProver_ContractsBytecodeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InputProver_ContractsBytecodeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InputProver_ContractsBytecodeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InputProver_ContractsBytecodeEntry_DoNotUse();
  InputProver_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InputProver_ContractsBytecodeEntry_DoNotUse& other);
  static const InputProver_ContractsBytecodeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InputProver_ContractsBytecodeEntry_DoNotUse*>(&_InputProver_ContractsBytecodeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.v1.InputProver.ContractsBytecodeEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkprover.v1.InputProver.ContractsBytecodeEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class InputProver PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.InputProver) */ {
 public:
  inline InputProver() : InputProver(nullptr) {};
  virtual ~InputProver();

  InputProver(const InputProver& from);
  InputProver(InputProver&& from) noexcept
    : InputProver() {
    *this = ::std::move(from);
  }

  inline InputProver& operator=(const InputProver& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputProver& operator=(InputProver&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputProver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputProver* internal_default_instance() {
    return reinterpret_cast<const InputProver*>(
               &_InputProver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InputProver& a, InputProver& b) {
    a.Swap(&b);
  }
  inline void Swap(InputProver* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputProver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputProver* New() const final {
    return CreateMaybeMessage<InputProver>(nullptr);
  }

  InputProver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputProver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputProver& from);
  void MergeFrom(const InputProver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputProver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.InputProver";
  }
  protected:
  explicit InputProver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDbFieldNumber = 4,
    kContractsBytecodeFieldNumber = 5,
    kGlobalExitRootFieldNumber = 2,
    kBatchL2DataFieldNumber = 3,
    kPublicInputsFieldNumber = 1,
  };
  // map<string, string> db = 4;
  int db_size() const;
  private:
  int _internal_db_size() const;
  public:
  void clear_db();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_db() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_db();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      db() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_db();

  // map<string, string> contracts_bytecode = 5;
  int contracts_bytecode_size() const;
  private:
  int _internal_contracts_bytecode_size() const;
  public:
  void clear_contracts_bytecode();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_contracts_bytecode() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_contracts_bytecode();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      contracts_bytecode() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_contracts_bytecode();

  // string global_exit_root = 2;
  void clear_global_exit_root();
  const std::string& global_exit_root() const;
  void set_global_exit_root(const std::string& value);
  void set_global_exit_root(std::string&& value);
  void set_global_exit_root(const char* value);
  void set_global_exit_root(const char* value, size_t size);
  std::string* mutable_global_exit_root();
  std::string* release_global_exit_root();
  void set_allocated_global_exit_root(std::string* global_exit_root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_global_exit_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_global_exit_root(
      std::string* global_exit_root);
  private:
  const std::string& _internal_global_exit_root() const;
  void _internal_set_global_exit_root(const std::string& value);
  std::string* _internal_mutable_global_exit_root();
  public:

  // string batch_l2_data = 3;
  void clear_batch_l2_data();
  const std::string& batch_l2_data() const;
  void set_batch_l2_data(const std::string& value);
  void set_batch_l2_data(std::string&& value);
  void set_batch_l2_data(const char* value);
  void set_batch_l2_data(const char* value, size_t size);
  std::string* mutable_batch_l2_data();
  std::string* release_batch_l2_data();
  void set_allocated_batch_l2_data(std::string* batch_l2_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_batch_l2_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_batch_l2_data(
      std::string* batch_l2_data);
  private:
  const std::string& _internal_batch_l2_data() const;
  void _internal_set_batch_l2_data(const std::string& value);
  std::string* _internal_mutable_batch_l2_data();
  public:

  // .zkprover.v1.PublicInputs public_inputs = 1;
  bool has_public_inputs() const;
  private:
  bool _internal_has_public_inputs() const;
  public:
  void clear_public_inputs();
  const ::zkprover::v1::PublicInputs& public_inputs() const;
  ::zkprover::v1::PublicInputs* release_public_inputs();
  ::zkprover::v1::PublicInputs* mutable_public_inputs();
  void set_allocated_public_inputs(::zkprover::v1::PublicInputs* public_inputs);
  private:
  const ::zkprover::v1::PublicInputs& _internal_public_inputs() const;
  ::zkprover::v1::PublicInputs* _internal_mutable_public_inputs();
  public:
  void unsafe_arena_set_allocated_public_inputs(
      ::zkprover::v1::PublicInputs* public_inputs);
  ::zkprover::v1::PublicInputs* unsafe_arena_release_public_inputs();

  // @@protoc_insertion_point(class_scope:zkprover.v1.InputProver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InputProver_DbEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > db_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InputProver_ContractsBytecodeEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > contracts_bytecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_exit_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_l2_data_;
  ::zkprover::v1::PublicInputs* public_inputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// -------------------------------------------------------------------

class PublicInputsExtended PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkprover.v1.PublicInputsExtended) */ {
 public:
  inline PublicInputsExtended() : PublicInputsExtended(nullptr) {};
  virtual ~PublicInputsExtended();

  PublicInputsExtended(const PublicInputsExtended& from);
  PublicInputsExtended(PublicInputsExtended&& from) noexcept
    : PublicInputsExtended() {
    *this = ::std::move(from);
  }

  inline PublicInputsExtended& operator=(const PublicInputsExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicInputsExtended& operator=(PublicInputsExtended&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicInputsExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicInputsExtended* internal_default_instance() {
    return reinterpret_cast<const PublicInputsExtended*>(
               &_PublicInputsExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PublicInputsExtended& a, PublicInputsExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicInputsExtended* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicInputsExtended* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicInputsExtended* New() const final {
    return CreateMaybeMessage<PublicInputsExtended>(nullptr);
  }

  PublicInputsExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicInputsExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicInputsExtended& from);
  void MergeFrom(const PublicInputsExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicInputsExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkprover.v1.PublicInputsExtended";
  }
  protected:
  explicit PublicInputsExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zk_5fprover_2eproto);
    return ::descriptor_table_zk_5fprover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputHashFieldNumber = 2,
    kPublicInputsFieldNumber = 1,
  };
  // string input_hash = 2;
  void clear_input_hash();
  const std::string& input_hash() const;
  void set_input_hash(const std::string& value);
  void set_input_hash(std::string&& value);
  void set_input_hash(const char* value);
  void set_input_hash(const char* value, size_t size);
  std::string* mutable_input_hash();
  std::string* release_input_hash();
  void set_allocated_input_hash(std::string* input_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_hash(
      std::string* input_hash);
  private:
  const std::string& _internal_input_hash() const;
  void _internal_set_input_hash(const std::string& value);
  std::string* _internal_mutable_input_hash();
  public:

  // .zkprover.v1.PublicInputs public_inputs = 1;
  bool has_public_inputs() const;
  private:
  bool _internal_has_public_inputs() const;
  public:
  void clear_public_inputs();
  const ::zkprover::v1::PublicInputs& public_inputs() const;
  ::zkprover::v1::PublicInputs* release_public_inputs();
  ::zkprover::v1::PublicInputs* mutable_public_inputs();
  void set_allocated_public_inputs(::zkprover::v1::PublicInputs* public_inputs);
  private:
  const ::zkprover::v1::PublicInputs& _internal_public_inputs() const;
  ::zkprover::v1::PublicInputs* _internal_mutable_public_inputs();
  public:
  void unsafe_arena_set_allocated_public_inputs(
      ::zkprover::v1::PublicInputs* public_inputs);
  ::zkprover::v1::PublicInputs* unsafe_arena_release_public_inputs();

  // @@protoc_insertion_point(class_scope:zkprover.v1.PublicInputsExtended)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_hash_;
  ::zkprover::v1::PublicInputs* public_inputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zk_5fprover_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Version

// string v0_0_1 = 1;
inline void Version::clear_v0_0_1() {
  v0_0_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Version::v0_0_1() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.Version.v0_0_1)
  return _internal_v0_0_1();
}
inline void Version::set_v0_0_1(const std::string& value) {
  _internal_set_v0_0_1(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.Version.v0_0_1)
}
inline std::string* Version::mutable_v0_0_1() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.Version.v0_0_1)
  return _internal_mutable_v0_0_1();
}
inline const std::string& Version::_internal_v0_0_1() const {
  return v0_0_1_.Get();
}
inline void Version::_internal_set_v0_0_1(const std::string& value) {
  
  v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Version::set_v0_0_1(std::string&& value) {
  
  v0_0_1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.Version.v0_0_1)
}
inline void Version::set_v0_0_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.Version.v0_0_1)
}
inline void Version::set_v0_0_1(const char* value,
    size_t size) {
  
  v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.Version.v0_0_1)
}
inline std::string* Version::_internal_mutable_v0_0_1() {
  
  return v0_0_1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Version::release_v0_0_1() {
  // @@protoc_insertion_point(field_release:zkprover.v1.Version.v0_0_1)
  return v0_0_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Version::set_allocated_v0_0_1(std::string* v0_0_1) {
  if (v0_0_1 != nullptr) {
    
  } else {
    
  }
  v0_0_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v0_0_1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.Version.v0_0_1)
}
inline std::string* Version::unsafe_arena_release_v0_0_1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.Version.v0_0_1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return v0_0_1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Version::unsafe_arena_set_allocated_v0_0_1(
    std::string* v0_0_1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (v0_0_1 != nullptr) {
    
  } else {
    
  }
  v0_0_1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      v0_0_1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.Version.v0_0_1)
}

// -------------------------------------------------------------------

// GetStatusRequest

// -------------------------------------------------------------------

// GenProofRequest

// .zkprover.v1.InputProver input = 1;
inline bool GenProofRequest::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool GenProofRequest::has_input() const {
  return _internal_has_input();
}
inline void GenProofRequest::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::zkprover::v1::InputProver& GenProofRequest::_internal_input() const {
  const ::zkprover::v1::InputProver* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::v1::InputProver*>(
      &::zkprover::v1::_InputProver_default_instance_);
}
inline const ::zkprover::v1::InputProver& GenProofRequest::input() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GenProofRequest.input)
  return _internal_input();
}
inline void GenProofRequest::unsafe_arena_set_allocated_input(
    ::zkprover::v1::InputProver* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GenProofRequest.input)
}
inline ::zkprover::v1::InputProver* GenProofRequest::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::v1::InputProver* GenProofRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GenProofRequest.input)
  
  ::zkprover::v1::InputProver* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::zkprover::v1::InputProver* GenProofRequest::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::v1::InputProver>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::zkprover::v1::InputProver* GenProofRequest::mutable_input() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GenProofRequest.input)
  return _internal_mutable_input();
}
inline void GenProofRequest::set_allocated_input(::zkprover::v1::InputProver* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GenProofRequest.input)
}

// -------------------------------------------------------------------

// CancelRequest

// string id = 1;
inline void CancelRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CancelRequest::id() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.CancelRequest.id)
  return _internal_id();
}
inline void CancelRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.CancelRequest.id)
}
inline std::string* CancelRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.CancelRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CancelRequest::_internal_id() const {
  return id_.Get();
}
inline void CancelRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CancelRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.CancelRequest.id)
}
inline void CancelRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.CancelRequest.id)
}
inline void CancelRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.CancelRequest.id)
}
inline std::string* CancelRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CancelRequest::release_id() {
  // @@protoc_insertion_point(field_release:zkprover.v1.CancelRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.CancelRequest.id)
}
inline std::string* CancelRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.CancelRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CancelRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.CancelRequest.id)
}

// -------------------------------------------------------------------

// GetProofRequest

// string id = 1;
inline void GetProofRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProofRequest::id() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetProofRequest.id)
  return _internal_id();
}
inline void GetProofRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetProofRequest.id)
}
inline std::string* GetProofRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetProofRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetProofRequest::_internal_id() const {
  return id_.Get();
}
inline void GetProofRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProofRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GetProofRequest.id)
}
inline void GetProofRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetProofRequest.id)
}
inline void GetProofRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetProofRequest.id)
}
inline std::string* GetProofRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProofRequest::release_id() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetProofRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProofRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetProofRequest.id)
}
inline std::string* GetProofRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GetProofRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetProofRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetProofRequest.id)
}

// uint64 timeout = 2;
inline void GetProofRequest::clear_timeout() {
  timeout_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetProofRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetProofRequest::timeout() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetProofRequest.timeout)
  return _internal_timeout();
}
inline void GetProofRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeout_ = value;
}
inline void GetProofRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetProofRequest.timeout)
}

// -------------------------------------------------------------------

// GetStatusResponse

// .zkprover.v1.GetStatusResponse.StatusProver state = 1;
inline void GetStatusResponse::clear_state() {
  state_ = 0;
}
inline ::zkprover::v1::GetStatusResponse_StatusProver GetStatusResponse::_internal_state() const {
  return static_cast< ::zkprover::v1::GetStatusResponse_StatusProver >(state_);
}
inline ::zkprover::v1::GetStatusResponse_StatusProver GetStatusResponse::state() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.state)
  return _internal_state();
}
inline void GetStatusResponse::_internal_set_state(::zkprover::v1::GetStatusResponse_StatusProver value) {
  
  state_ = value;
}
inline void GetStatusResponse::set_state(::zkprover::v1::GetStatusResponse_StatusProver value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.state)
}

// string last_computed_request_id = 2;
inline void GetStatusResponse::clear_last_computed_request_id() {
  last_computed_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStatusResponse::last_computed_request_id() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.last_computed_request_id)
  return _internal_last_computed_request_id();
}
inline void GetStatusResponse::set_last_computed_request_id(const std::string& value) {
  _internal_set_last_computed_request_id(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.last_computed_request_id)
}
inline std::string* GetStatusResponse::mutable_last_computed_request_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetStatusResponse.last_computed_request_id)
  return _internal_mutable_last_computed_request_id();
}
inline const std::string& GetStatusResponse::_internal_last_computed_request_id() const {
  return last_computed_request_id_.Get();
}
inline void GetStatusResponse::_internal_set_last_computed_request_id(const std::string& value) {
  
  last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStatusResponse::set_last_computed_request_id(std::string&& value) {
  
  last_computed_request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GetStatusResponse.last_computed_request_id)
}
inline void GetStatusResponse::set_last_computed_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetStatusResponse.last_computed_request_id)
}
inline void GetStatusResponse::set_last_computed_request_id(const char* value,
    size_t size) {
  
  last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetStatusResponse.last_computed_request_id)
}
inline std::string* GetStatusResponse::_internal_mutable_last_computed_request_id() {
  
  return last_computed_request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStatusResponse::release_last_computed_request_id() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetStatusResponse.last_computed_request_id)
  return last_computed_request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatusResponse::set_allocated_last_computed_request_id(std::string* last_computed_request_id) {
  if (last_computed_request_id != nullptr) {
    
  } else {
    
  }
  last_computed_request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_computed_request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetStatusResponse.last_computed_request_id)
}
inline std::string* GetStatusResponse::unsafe_arena_release_last_computed_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GetStatusResponse.last_computed_request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_computed_request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStatusResponse::unsafe_arena_set_allocated_last_computed_request_id(
    std::string* last_computed_request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_computed_request_id != nullptr) {
    
  } else {
    
  }
  last_computed_request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_computed_request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetStatusResponse.last_computed_request_id)
}

// uint64 last_computed_end_time = 3;
inline void GetStatusResponse::clear_last_computed_end_time() {
  last_computed_end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStatusResponse::_internal_last_computed_end_time() const {
  return last_computed_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStatusResponse::last_computed_end_time() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.last_computed_end_time)
  return _internal_last_computed_end_time();
}
inline void GetStatusResponse::_internal_set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_computed_end_time_ = value;
}
inline void GetStatusResponse::set_last_computed_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_computed_end_time(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.last_computed_end_time)
}

// string current_computing_request_id = 4;
inline void GetStatusResponse::clear_current_computing_request_id() {
  current_computing_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStatusResponse::current_computing_request_id() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.current_computing_request_id)
  return _internal_current_computing_request_id();
}
inline void GetStatusResponse::set_current_computing_request_id(const std::string& value) {
  _internal_set_current_computing_request_id(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.current_computing_request_id)
}
inline std::string* GetStatusResponse::mutable_current_computing_request_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetStatusResponse.current_computing_request_id)
  return _internal_mutable_current_computing_request_id();
}
inline const std::string& GetStatusResponse::_internal_current_computing_request_id() const {
  return current_computing_request_id_.Get();
}
inline void GetStatusResponse::_internal_set_current_computing_request_id(const std::string& value) {
  
  current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStatusResponse::set_current_computing_request_id(std::string&& value) {
  
  current_computing_request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GetStatusResponse.current_computing_request_id)
}
inline void GetStatusResponse::set_current_computing_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetStatusResponse.current_computing_request_id)
}
inline void GetStatusResponse::set_current_computing_request_id(const char* value,
    size_t size) {
  
  current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetStatusResponse.current_computing_request_id)
}
inline std::string* GetStatusResponse::_internal_mutable_current_computing_request_id() {
  
  return current_computing_request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStatusResponse::release_current_computing_request_id() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetStatusResponse.current_computing_request_id)
  return current_computing_request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatusResponse::set_allocated_current_computing_request_id(std::string* current_computing_request_id) {
  if (current_computing_request_id != nullptr) {
    
  } else {
    
  }
  current_computing_request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_computing_request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetStatusResponse.current_computing_request_id)
}
inline std::string* GetStatusResponse::unsafe_arena_release_current_computing_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GetStatusResponse.current_computing_request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return current_computing_request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStatusResponse::unsafe_arena_set_allocated_current_computing_request_id(
    std::string* current_computing_request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (current_computing_request_id != nullptr) {
    
  } else {
    
  }
  current_computing_request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      current_computing_request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetStatusResponse.current_computing_request_id)
}

// uint64 current_computing_start_time = 5;
inline void GetStatusResponse::clear_current_computing_start_time() {
  current_computing_start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStatusResponse::_internal_current_computing_start_time() const {
  return current_computing_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStatusResponse::current_computing_start_time() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.current_computing_start_time)
  return _internal_current_computing_start_time();
}
inline void GetStatusResponse::_internal_set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_computing_start_time_ = value;
}
inline void GetStatusResponse::set_current_computing_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_computing_start_time(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.current_computing_start_time)
}

// string version_proto = 6;
inline void GetStatusResponse::clear_version_proto() {
  version_proto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStatusResponse::version_proto() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.version_proto)
  return _internal_version_proto();
}
inline void GetStatusResponse::set_version_proto(const std::string& value) {
  _internal_set_version_proto(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.version_proto)
}
inline std::string* GetStatusResponse::mutable_version_proto() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetStatusResponse.version_proto)
  return _internal_mutable_version_proto();
}
inline const std::string& GetStatusResponse::_internal_version_proto() const {
  return version_proto_.Get();
}
inline void GetStatusResponse::_internal_set_version_proto(const std::string& value) {
  
  version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStatusResponse::set_version_proto(std::string&& value) {
  
  version_proto_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GetStatusResponse.version_proto)
}
inline void GetStatusResponse::set_version_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetStatusResponse.version_proto)
}
inline void GetStatusResponse::set_version_proto(const char* value,
    size_t size) {
  
  version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetStatusResponse.version_proto)
}
inline std::string* GetStatusResponse::_internal_mutable_version_proto() {
  
  return version_proto_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStatusResponse::release_version_proto() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetStatusResponse.version_proto)
  return version_proto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatusResponse::set_allocated_version_proto(std::string* version_proto) {
  if (version_proto != nullptr) {
    
  } else {
    
  }
  version_proto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_proto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetStatusResponse.version_proto)
}
inline std::string* GetStatusResponse::unsafe_arena_release_version_proto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GetStatusResponse.version_proto)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_proto_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStatusResponse::unsafe_arena_set_allocated_version_proto(
    std::string* version_proto) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version_proto != nullptr) {
    
  } else {
    
  }
  version_proto_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version_proto, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetStatusResponse.version_proto)
}

// string version_server = 7;
inline void GetStatusResponse::clear_version_server() {
  version_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStatusResponse::version_server() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.version_server)
  return _internal_version_server();
}
inline void GetStatusResponse::set_version_server(const std::string& value) {
  _internal_set_version_server(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.version_server)
}
inline std::string* GetStatusResponse::mutable_version_server() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetStatusResponse.version_server)
  return _internal_mutable_version_server();
}
inline const std::string& GetStatusResponse::_internal_version_server() const {
  return version_server_.Get();
}
inline void GetStatusResponse::_internal_set_version_server(const std::string& value) {
  
  version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStatusResponse::set_version_server(std::string&& value) {
  
  version_server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GetStatusResponse.version_server)
}
inline void GetStatusResponse::set_version_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetStatusResponse.version_server)
}
inline void GetStatusResponse::set_version_server(const char* value,
    size_t size) {
  
  version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetStatusResponse.version_server)
}
inline std::string* GetStatusResponse::_internal_mutable_version_server() {
  
  return version_server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStatusResponse::release_version_server() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetStatusResponse.version_server)
  return version_server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatusResponse::set_allocated_version_server(std::string* version_server) {
  if (version_server != nullptr) {
    
  } else {
    
  }
  version_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetStatusResponse.version_server)
}
inline std::string* GetStatusResponse::unsafe_arena_release_version_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GetStatusResponse.version_server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStatusResponse::unsafe_arena_set_allocated_version_server(
    std::string* version_server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version_server != nullptr) {
    
  } else {
    
  }
  version_server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version_server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetStatusResponse.version_server)
}

// repeated string pending_request_queue_ids = 8;
inline int GetStatusResponse::_internal_pending_request_queue_ids_size() const {
  return pending_request_queue_ids_.size();
}
inline int GetStatusResponse::pending_request_queue_ids_size() const {
  return _internal_pending_request_queue_ids_size();
}
inline void GetStatusResponse::clear_pending_request_queue_ids() {
  pending_request_queue_ids_.Clear();
}
inline std::string* GetStatusResponse::add_pending_request_queue_ids() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
  return _internal_add_pending_request_queue_ids();
}
inline const std::string& GetStatusResponse::_internal_pending_request_queue_ids(int index) const {
  return pending_request_queue_ids_.Get(index);
}
inline const std::string& GetStatusResponse::pending_request_queue_ids(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
  return _internal_pending_request_queue_ids(index);
}
inline std::string* GetStatusResponse::mutable_pending_request_queue_ids(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
  return pending_request_queue_ids_.Mutable(index);
}
inline void GetStatusResponse::set_pending_request_queue_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
  pending_request_queue_ids_.Mutable(index)->assign(value);
}
inline void GetStatusResponse::set_pending_request_queue_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
  pending_request_queue_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetStatusResponse::set_pending_request_queue_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pending_request_queue_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
}
inline void GetStatusResponse::set_pending_request_queue_ids(int index, const char* value, size_t size) {
  pending_request_queue_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
}
inline std::string* GetStatusResponse::_internal_add_pending_request_queue_ids() {
  return pending_request_queue_ids_.Add();
}
inline void GetStatusResponse::add_pending_request_queue_ids(const std::string& value) {
  pending_request_queue_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
}
inline void GetStatusResponse::add_pending_request_queue_ids(std::string&& value) {
  pending_request_queue_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
}
inline void GetStatusResponse::add_pending_request_queue_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pending_request_queue_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
}
inline void GetStatusResponse::add_pending_request_queue_ids(const char* value, size_t size) {
  pending_request_queue_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetStatusResponse::pending_request_queue_ids() const {
  // @@protoc_insertion_point(field_list:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
  return pending_request_queue_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetStatusResponse::mutable_pending_request_queue_ids() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.v1.GetStatusResponse.pending_request_queue_ids)
  return &pending_request_queue_ids_;
}

// -------------------------------------------------------------------

// GenProofResponse

// string id = 1;
inline void GenProofResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GenProofResponse::id() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GenProofResponse.id)
  return _internal_id();
}
inline void GenProofResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GenProofResponse.id)
}
inline std::string* GenProofResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GenProofResponse.id)
  return _internal_mutable_id();
}
inline const std::string& GenProofResponse::_internal_id() const {
  return id_.Get();
}
inline void GenProofResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GenProofResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GenProofResponse.id)
}
inline void GenProofResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GenProofResponse.id)
}
inline void GenProofResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GenProofResponse.id)
}
inline std::string* GenProofResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GenProofResponse::release_id() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GenProofResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenProofResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GenProofResponse.id)
}
inline std::string* GenProofResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GenProofResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GenProofResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GenProofResponse.id)
}

// .zkprover.v1.GenProofResponse.ResultGenProof result = 2;
inline void GenProofResponse::clear_result() {
  result_ = 0;
}
inline ::zkprover::v1::GenProofResponse_ResultGenProof GenProofResponse::_internal_result() const {
  return static_cast< ::zkprover::v1::GenProofResponse_ResultGenProof >(result_);
}
inline ::zkprover::v1::GenProofResponse_ResultGenProof GenProofResponse::result() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GenProofResponse.result)
  return _internal_result();
}
inline void GenProofResponse::_internal_set_result(::zkprover::v1::GenProofResponse_ResultGenProof value) {
  
  result_ = value;
}
inline void GenProofResponse::set_result(::zkprover::v1::GenProofResponse_ResultGenProof value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GenProofResponse.result)
}

// -------------------------------------------------------------------

// CancelResponse

// .zkprover.v1.CancelResponse.ResultCancel result = 1;
inline void CancelResponse::clear_result() {
  result_ = 0;
}
inline ::zkprover::v1::CancelResponse_ResultCancel CancelResponse::_internal_result() const {
  return static_cast< ::zkprover::v1::CancelResponse_ResultCancel >(result_);
}
inline ::zkprover::v1::CancelResponse_ResultCancel CancelResponse::result() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.CancelResponse.result)
  return _internal_result();
}
inline void CancelResponse::_internal_set_result(::zkprover::v1::CancelResponse_ResultCancel value) {
  
  result_ = value;
}
inline void CancelResponse::set_result(::zkprover::v1::CancelResponse_ResultCancel value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.CancelResponse.result)
}

// -------------------------------------------------------------------

// GetProofResponse

// string id = 1;
inline void GetProofResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProofResponse::id() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetProofResponse.id)
  return _internal_id();
}
inline void GetProofResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetProofResponse.id)
}
inline std::string* GetProofResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetProofResponse.id)
  return _internal_mutable_id();
}
inline const std::string& GetProofResponse::_internal_id() const {
  return id_.Get();
}
inline void GetProofResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProofResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GetProofResponse.id)
}
inline void GetProofResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetProofResponse.id)
}
inline void GetProofResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetProofResponse.id)
}
inline std::string* GetProofResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProofResponse::release_id() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetProofResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProofResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetProofResponse.id)
}
inline std::string* GetProofResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GetProofResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetProofResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetProofResponse.id)
}

// .zkprover.v1.Proof proof = 2;
inline bool GetProofResponse::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool GetProofResponse::has_proof() const {
  return _internal_has_proof();
}
inline void GetProofResponse::clear_proof() {
  if (GetArena() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::zkprover::v1::Proof& GetProofResponse::_internal_proof() const {
  const ::zkprover::v1::Proof* p = proof_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::v1::Proof*>(
      &::zkprover::v1::_Proof_default_instance_);
}
inline const ::zkprover::v1::Proof& GetProofResponse::proof() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetProofResponse.proof)
  return _internal_proof();
}
inline void GetProofResponse::unsafe_arena_set_allocated_proof(
    ::zkprover::v1::Proof* proof) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetProofResponse.proof)
}
inline ::zkprover::v1::Proof* GetProofResponse::release_proof() {
  auto temp = unsafe_arena_release_proof();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::v1::Proof* GetProofResponse::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetProofResponse.proof)
  
  ::zkprover::v1::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::zkprover::v1::Proof* GetProofResponse::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::v1::Proof>(GetArena());
    proof_ = p;
  }
  return proof_;
}
inline ::zkprover::v1::Proof* GetProofResponse::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetProofResponse.proof)
  return _internal_mutable_proof();
}
inline void GetProofResponse::set_allocated_proof(::zkprover::v1::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetProofResponse.proof)
}

// .zkprover.v1.PublicInputsExtended public = 3;
inline bool GetProofResponse::_internal_has_public_() const {
  return this != internal_default_instance() && public__ != nullptr;
}
inline bool GetProofResponse::has_public_() const {
  return _internal_has_public_();
}
inline void GetProofResponse::clear_public_() {
  if (GetArena() == nullptr && public__ != nullptr) {
    delete public__;
  }
  public__ = nullptr;
}
inline const ::zkprover::v1::PublicInputsExtended& GetProofResponse::_internal_public_() const {
  const ::zkprover::v1::PublicInputsExtended* p = public__;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::v1::PublicInputsExtended*>(
      &::zkprover::v1::_PublicInputsExtended_default_instance_);
}
inline const ::zkprover::v1::PublicInputsExtended& GetProofResponse::public_() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetProofResponse.public)
  return _internal_public_();
}
inline void GetProofResponse::unsafe_arena_set_allocated_public_(
    ::zkprover::v1::PublicInputsExtended* public_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public__);
  }
  public__ = public_;
  if (public_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetProofResponse.public)
}
inline ::zkprover::v1::PublicInputsExtended* GetProofResponse::release_public_() {
  auto temp = unsafe_arena_release_public_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::v1::PublicInputsExtended* GetProofResponse::unsafe_arena_release_public_() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetProofResponse.public)
  
  ::zkprover::v1::PublicInputsExtended* temp = public__;
  public__ = nullptr;
  return temp;
}
inline ::zkprover::v1::PublicInputsExtended* GetProofResponse::_internal_mutable_public_() {
  
  if (public__ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::v1::PublicInputsExtended>(GetArena());
    public__ = p;
  }
  return public__;
}
inline ::zkprover::v1::PublicInputsExtended* GetProofResponse::mutable_public_() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetProofResponse.public)
  return _internal_mutable_public_();
}
inline void GetProofResponse::set_allocated_public_(::zkprover::v1::PublicInputsExtended* public_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public__;
  }
  if (public_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_);
    if (message_arena != submessage_arena) {
      public_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_, submessage_arena);
    }
    
  } else {
    
  }
  public__ = public_;
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetProofResponse.public)
}

// .zkprover.v1.GetProofResponse.ResultGetProof result = 4;
inline void GetProofResponse::clear_result() {
  result_ = 0;
}
inline ::zkprover::v1::GetProofResponse_ResultGetProof GetProofResponse::_internal_result() const {
  return static_cast< ::zkprover::v1::GetProofResponse_ResultGetProof >(result_);
}
inline ::zkprover::v1::GetProofResponse_ResultGetProof GetProofResponse::result() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetProofResponse.result)
  return _internal_result();
}
inline void GetProofResponse::_internal_set_result(::zkprover::v1::GetProofResponse_ResultGetProof value) {
  
  result_ = value;
}
inline void GetProofResponse::set_result(::zkprover::v1::GetProofResponse_ResultGetProof value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetProofResponse.result)
}

// string result_string = 5;
inline void GetProofResponse::clear_result_string() {
  result_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProofResponse::result_string() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.GetProofResponse.result_string)
  return _internal_result_string();
}
inline void GetProofResponse::set_result_string(const std::string& value) {
  _internal_set_result_string(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.GetProofResponse.result_string)
}
inline std::string* GetProofResponse::mutable_result_string() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.GetProofResponse.result_string)
  return _internal_mutable_result_string();
}
inline const std::string& GetProofResponse::_internal_result_string() const {
  return result_string_.Get();
}
inline void GetProofResponse::_internal_set_result_string(const std::string& value) {
  
  result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProofResponse::set_result_string(std::string&& value) {
  
  result_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.GetProofResponse.result_string)
}
inline void GetProofResponse::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.GetProofResponse.result_string)
}
inline void GetProofResponse::set_result_string(const char* value,
    size_t size) {
  
  result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.GetProofResponse.result_string)
}
inline std::string* GetProofResponse::_internal_mutable_result_string() {
  
  return result_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProofResponse::release_result_string() {
  // @@protoc_insertion_point(field_release:zkprover.v1.GetProofResponse.result_string)
  return result_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProofResponse::set_allocated_result_string(std::string* result_string) {
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.GetProofResponse.result_string)
}
inline std::string* GetProofResponse::unsafe_arena_release_result_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.GetProofResponse.result_string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetProofResponse::unsafe_arena_set_allocated_result_string(
    std::string* result_string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result_string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.GetProofResponse.result_string)
}

// -------------------------------------------------------------------

// PublicInputs

// string old_state_root = 1;
inline void PublicInputs::clear_old_state_root() {
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::old_state_root() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.old_state_root)
  return _internal_old_state_root();
}
inline void PublicInputs::set_old_state_root(const std::string& value) {
  _internal_set_old_state_root(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.old_state_root)
}
inline std::string* PublicInputs::mutable_old_state_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputs.old_state_root)
  return _internal_mutable_old_state_root();
}
inline const std::string& PublicInputs::_internal_old_state_root() const {
  return old_state_root_.Get();
}
inline void PublicInputs::_internal_set_old_state_root(const std::string& value) {
  
  old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_old_state_root(std::string&& value) {
  
  old_state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputs.old_state_root)
}
inline void PublicInputs::set_old_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputs.old_state_root)
}
inline void PublicInputs::set_old_state_root(const char* value,
    size_t size) {
  
  old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputs.old_state_root)
}
inline std::string* PublicInputs::_internal_mutable_old_state_root() {
  
  return old_state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_old_state_root() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputs.old_state_root)
  return old_state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_old_state_root(std::string* old_state_root) {
  if (old_state_root != nullptr) {
    
  } else {
    
  }
  old_state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputs.old_state_root)
}
inline std::string* PublicInputs::unsafe_arena_release_old_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputs.old_state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return old_state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_old_state_root(
    std::string* old_state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (old_state_root != nullptr) {
    
  } else {
    
  }
  old_state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      old_state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputs.old_state_root)
}

// string old_local_exit_root = 2;
inline void PublicInputs::clear_old_local_exit_root() {
  old_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::old_local_exit_root() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.old_local_exit_root)
  return _internal_old_local_exit_root();
}
inline void PublicInputs::set_old_local_exit_root(const std::string& value) {
  _internal_set_old_local_exit_root(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.old_local_exit_root)
}
inline std::string* PublicInputs::mutable_old_local_exit_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputs.old_local_exit_root)
  return _internal_mutable_old_local_exit_root();
}
inline const std::string& PublicInputs::_internal_old_local_exit_root() const {
  return old_local_exit_root_.Get();
}
inline void PublicInputs::_internal_set_old_local_exit_root(const std::string& value) {
  
  old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_old_local_exit_root(std::string&& value) {
  
  old_local_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputs.old_local_exit_root)
}
inline void PublicInputs::set_old_local_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputs.old_local_exit_root)
}
inline void PublicInputs::set_old_local_exit_root(const char* value,
    size_t size) {
  
  old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputs.old_local_exit_root)
}
inline std::string* PublicInputs::_internal_mutable_old_local_exit_root() {
  
  return old_local_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_old_local_exit_root() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputs.old_local_exit_root)
  return old_local_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_old_local_exit_root(std::string* old_local_exit_root) {
  if (old_local_exit_root != nullptr) {
    
  } else {
    
  }
  old_local_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_local_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputs.old_local_exit_root)
}
inline std::string* PublicInputs::unsafe_arena_release_old_local_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputs.old_local_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return old_local_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_old_local_exit_root(
    std::string* old_local_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (old_local_exit_root != nullptr) {
    
  } else {
    
  }
  old_local_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      old_local_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputs.old_local_exit_root)
}

// string new_state_root = 3;
inline void PublicInputs::clear_new_state_root() {
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::new_state_root() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.new_state_root)
  return _internal_new_state_root();
}
inline void PublicInputs::set_new_state_root(const std::string& value) {
  _internal_set_new_state_root(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.new_state_root)
}
inline std::string* PublicInputs::mutable_new_state_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputs.new_state_root)
  return _internal_mutable_new_state_root();
}
inline const std::string& PublicInputs::_internal_new_state_root() const {
  return new_state_root_.Get();
}
inline void PublicInputs::_internal_set_new_state_root(const std::string& value) {
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_new_state_root(std::string&& value) {
  
  new_state_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputs.new_state_root)
}
inline void PublicInputs::set_new_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputs.new_state_root)
}
inline void PublicInputs::set_new_state_root(const char* value,
    size_t size) {
  
  new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputs.new_state_root)
}
inline std::string* PublicInputs::_internal_mutable_new_state_root() {
  
  return new_state_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_new_state_root() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputs.new_state_root)
  return new_state_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_new_state_root(std::string* new_state_root) {
  if (new_state_root != nullptr) {
    
  } else {
    
  }
  new_state_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_state_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputs.new_state_root)
}
inline std::string* PublicInputs::unsafe_arena_release_new_state_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputs.new_state_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_state_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_new_state_root(
    std::string* new_state_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_state_root != nullptr) {
    
  } else {
    
  }
  new_state_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_state_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputs.new_state_root)
}

// string new_local_exit_root = 4;
inline void PublicInputs::clear_new_local_exit_root() {
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::new_local_exit_root() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.new_local_exit_root)
  return _internal_new_local_exit_root();
}
inline void PublicInputs::set_new_local_exit_root(const std::string& value) {
  _internal_set_new_local_exit_root(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.new_local_exit_root)
}
inline std::string* PublicInputs::mutable_new_local_exit_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputs.new_local_exit_root)
  return _internal_mutable_new_local_exit_root();
}
inline const std::string& PublicInputs::_internal_new_local_exit_root() const {
  return new_local_exit_root_.Get();
}
inline void PublicInputs::_internal_set_new_local_exit_root(const std::string& value) {
  
  new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_new_local_exit_root(std::string&& value) {
  
  new_local_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputs.new_local_exit_root)
}
inline void PublicInputs::set_new_local_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputs.new_local_exit_root)
}
inline void PublicInputs::set_new_local_exit_root(const char* value,
    size_t size) {
  
  new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputs.new_local_exit_root)
}
inline std::string* PublicInputs::_internal_mutable_new_local_exit_root() {
  
  return new_local_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_new_local_exit_root() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputs.new_local_exit_root)
  return new_local_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_new_local_exit_root(std::string* new_local_exit_root) {
  if (new_local_exit_root != nullptr) {
    
  } else {
    
  }
  new_local_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_local_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputs.new_local_exit_root)
}
inline std::string* PublicInputs::unsafe_arena_release_new_local_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputs.new_local_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_local_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_new_local_exit_root(
    std::string* new_local_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_local_exit_root != nullptr) {
    
  } else {
    
  }
  new_local_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_local_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputs.new_local_exit_root)
}

// string sequencer_addr = 5;
inline void PublicInputs::clear_sequencer_addr() {
  sequencer_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::sequencer_addr() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.sequencer_addr)
  return _internal_sequencer_addr();
}
inline void PublicInputs::set_sequencer_addr(const std::string& value) {
  _internal_set_sequencer_addr(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.sequencer_addr)
}
inline std::string* PublicInputs::mutable_sequencer_addr() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputs.sequencer_addr)
  return _internal_mutable_sequencer_addr();
}
inline const std::string& PublicInputs::_internal_sequencer_addr() const {
  return sequencer_addr_.Get();
}
inline void PublicInputs::_internal_set_sequencer_addr(const std::string& value) {
  
  sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_sequencer_addr(std::string&& value) {
  
  sequencer_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputs.sequencer_addr)
}
inline void PublicInputs::set_sequencer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputs.sequencer_addr)
}
inline void PublicInputs::set_sequencer_addr(const char* value,
    size_t size) {
  
  sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputs.sequencer_addr)
}
inline std::string* PublicInputs::_internal_mutable_sequencer_addr() {
  
  return sequencer_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_sequencer_addr() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputs.sequencer_addr)
  return sequencer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_sequencer_addr(std::string* sequencer_addr) {
  if (sequencer_addr != nullptr) {
    
  } else {
    
  }
  sequencer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequencer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputs.sequencer_addr)
}
inline std::string* PublicInputs::unsafe_arena_release_sequencer_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputs.sequencer_addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sequencer_addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_sequencer_addr(
    std::string* sequencer_addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sequencer_addr != nullptr) {
    
  } else {
    
  }
  sequencer_addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sequencer_addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputs.sequencer_addr)
}

// string batch_hash_data = 6;
inline void PublicInputs::clear_batch_hash_data() {
  batch_hash_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::batch_hash_data() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.batch_hash_data)
  return _internal_batch_hash_data();
}
inline void PublicInputs::set_batch_hash_data(const std::string& value) {
  _internal_set_batch_hash_data(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.batch_hash_data)
}
inline std::string* PublicInputs::mutable_batch_hash_data() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputs.batch_hash_data)
  return _internal_mutable_batch_hash_data();
}
inline const std::string& PublicInputs::_internal_batch_hash_data() const {
  return batch_hash_data_.Get();
}
inline void PublicInputs::_internal_set_batch_hash_data(const std::string& value) {
  
  batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_batch_hash_data(std::string&& value) {
  
  batch_hash_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputs.batch_hash_data)
}
inline void PublicInputs::set_batch_hash_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputs.batch_hash_data)
}
inline void PublicInputs::set_batch_hash_data(const char* value,
    size_t size) {
  
  batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputs.batch_hash_data)
}
inline std::string* PublicInputs::_internal_mutable_batch_hash_data() {
  
  return batch_hash_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_batch_hash_data() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputs.batch_hash_data)
  return batch_hash_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_batch_hash_data(std::string* batch_hash_data) {
  if (batch_hash_data != nullptr) {
    
  } else {
    
  }
  batch_hash_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_hash_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputs.batch_hash_data)
}
inline std::string* PublicInputs::unsafe_arena_release_batch_hash_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputs.batch_hash_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return batch_hash_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_batch_hash_data(
    std::string* batch_hash_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (batch_hash_data != nullptr) {
    
  } else {
    
  }
  batch_hash_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      batch_hash_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputs.batch_hash_data)
}

// uint32 batch_num = 7;
inline void PublicInputs::clear_batch_num() {
  batch_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::_internal_batch_num() const {
  return batch_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublicInputs::batch_num() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.batch_num)
  return _internal_batch_num();
}
inline void PublicInputs::_internal_set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_num_ = value;
}
inline void PublicInputs::set_batch_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_num(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.batch_num)
}

// uint64 eth_timestamp = 8;
inline void PublicInputs::clear_eth_timestamp() {
  eth_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicInputs::_internal_eth_timestamp() const {
  return eth_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicInputs::eth_timestamp() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.eth_timestamp)
  return _internal_eth_timestamp();
}
inline void PublicInputs::_internal_set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  eth_timestamp_ = value;
}
inline void PublicInputs::set_eth_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_eth_timestamp(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.eth_timestamp)
}

// string aggregator_addr = 9;
inline void PublicInputs::clear_aggregator_addr() {
  aggregator_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputs::aggregator_addr() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.aggregator_addr)
  return _internal_aggregator_addr();
}
inline void PublicInputs::set_aggregator_addr(const std::string& value) {
  _internal_set_aggregator_addr(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.aggregator_addr)
}
inline std::string* PublicInputs::mutable_aggregator_addr() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputs.aggregator_addr)
  return _internal_mutable_aggregator_addr();
}
inline const std::string& PublicInputs::_internal_aggregator_addr() const {
  return aggregator_addr_.Get();
}
inline void PublicInputs::_internal_set_aggregator_addr(const std::string& value) {
  
  aggregator_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputs::set_aggregator_addr(std::string&& value) {
  
  aggregator_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputs.aggregator_addr)
}
inline void PublicInputs::set_aggregator_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aggregator_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputs.aggregator_addr)
}
inline void PublicInputs::set_aggregator_addr(const char* value,
    size_t size) {
  
  aggregator_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputs.aggregator_addr)
}
inline std::string* PublicInputs::_internal_mutable_aggregator_addr() {
  
  return aggregator_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputs::release_aggregator_addr() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputs.aggregator_addr)
  return aggregator_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputs::set_allocated_aggregator_addr(std::string* aggregator_addr) {
  if (aggregator_addr != nullptr) {
    
  } else {
    
  }
  aggregator_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aggregator_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputs.aggregator_addr)
}
inline std::string* PublicInputs::unsafe_arena_release_aggregator_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputs.aggregator_addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return aggregator_addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputs::unsafe_arena_set_allocated_aggregator_addr(
    std::string* aggregator_addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aggregator_addr != nullptr) {
    
  } else {
    
  }
  aggregator_addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aggregator_addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputs.aggregator_addr)
}

// uint64 chain_id = 10;
inline void PublicInputs::clear_chain_id() {
  chain_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicInputs::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicInputs::chain_id() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputs.chain_id)
  return _internal_chain_id();
}
inline void PublicInputs::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chain_id_ = value;
}
inline void PublicInputs::set_chain_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputs.chain_id)
}

// -------------------------------------------------------------------

// ProofB

// repeated string proofs = 1;
inline int ProofB::_internal_proofs_size() const {
  return proofs_.size();
}
inline int ProofB::proofs_size() const {
  return _internal_proofs_size();
}
inline void ProofB::clear_proofs() {
  proofs_.Clear();
}
inline std::string* ProofB::add_proofs() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.v1.ProofB.proofs)
  return _internal_add_proofs();
}
inline const std::string& ProofB::_internal_proofs(int index) const {
  return proofs_.Get(index);
}
inline const std::string& ProofB::proofs(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.v1.ProofB.proofs)
  return _internal_proofs(index);
}
inline std::string* ProofB::mutable_proofs(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.ProofB.proofs)
  return proofs_.Mutable(index);
}
inline void ProofB::set_proofs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.ProofB.proofs)
  proofs_.Mutable(index)->assign(value);
}
inline void ProofB::set_proofs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.ProofB.proofs)
  proofs_.Mutable(index)->assign(std::move(value));
}
inline void ProofB::set_proofs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.v1.ProofB.proofs)
}
inline void ProofB::set_proofs(int index, const char* value, size_t size) {
  proofs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.ProofB.proofs)
}
inline std::string* ProofB::_internal_add_proofs() {
  return proofs_.Add();
}
inline void ProofB::add_proofs(const std::string& value) {
  proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.v1.ProofB.proofs)
}
inline void ProofB::add_proofs(std::string&& value) {
  proofs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.v1.ProofB.proofs)
}
inline void ProofB::add_proofs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.v1.ProofB.proofs)
}
inline void ProofB::add_proofs(const char* value, size_t size) {
  proofs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.v1.ProofB.proofs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProofB::proofs() const {
  // @@protoc_insertion_point(field_list:zkprover.v1.ProofB.proofs)
  return proofs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProofB::mutable_proofs() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.v1.ProofB.proofs)
  return &proofs_;
}

// -------------------------------------------------------------------

// Proof

// repeated string proof_a = 1;
inline int Proof::_internal_proof_a_size() const {
  return proof_a_.size();
}
inline int Proof::proof_a_size() const {
  return _internal_proof_a_size();
}
inline void Proof::clear_proof_a() {
  proof_a_.Clear();
}
inline std::string* Proof::add_proof_a() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.v1.Proof.proof_a)
  return _internal_add_proof_a();
}
inline const std::string& Proof::_internal_proof_a(int index) const {
  return proof_a_.Get(index);
}
inline const std::string& Proof::proof_a(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.v1.Proof.proof_a)
  return _internal_proof_a(index);
}
inline std::string* Proof::mutable_proof_a(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.Proof.proof_a)
  return proof_a_.Mutable(index);
}
inline void Proof::set_proof_a(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.Proof.proof_a)
  proof_a_.Mutable(index)->assign(value);
}
inline void Proof::set_proof_a(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.Proof.proof_a)
  proof_a_.Mutable(index)->assign(std::move(value));
}
inline void Proof::set_proof_a(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proof_a_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.v1.Proof.proof_a)
}
inline void Proof::set_proof_a(int index, const char* value, size_t size) {
  proof_a_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.Proof.proof_a)
}
inline std::string* Proof::_internal_add_proof_a() {
  return proof_a_.Add();
}
inline void Proof::add_proof_a(const std::string& value) {
  proof_a_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.v1.Proof.proof_a)
}
inline void Proof::add_proof_a(std::string&& value) {
  proof_a_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.v1.Proof.proof_a)
}
inline void Proof::add_proof_a(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proof_a_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.v1.Proof.proof_a)
}
inline void Proof::add_proof_a(const char* value, size_t size) {
  proof_a_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.v1.Proof.proof_a)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Proof::proof_a() const {
  // @@protoc_insertion_point(field_list:zkprover.v1.Proof.proof_a)
  return proof_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Proof::mutable_proof_a() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.v1.Proof.proof_a)
  return &proof_a_;
}

// repeated .zkprover.v1.ProofB proof_b = 2;
inline int Proof::_internal_proof_b_size() const {
  return proof_b_.size();
}
inline int Proof::proof_b_size() const {
  return _internal_proof_b_size();
}
inline void Proof::clear_proof_b() {
  proof_b_.Clear();
}
inline ::zkprover::v1::ProofB* Proof::mutable_proof_b(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.Proof.proof_b)
  return proof_b_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::v1::ProofB >*
Proof::mutable_proof_b() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.v1.Proof.proof_b)
  return &proof_b_;
}
inline const ::zkprover::v1::ProofB& Proof::_internal_proof_b(int index) const {
  return proof_b_.Get(index);
}
inline const ::zkprover::v1::ProofB& Proof::proof_b(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.v1.Proof.proof_b)
  return _internal_proof_b(index);
}
inline ::zkprover::v1::ProofB* Proof::_internal_add_proof_b() {
  return proof_b_.Add();
}
inline ::zkprover::v1::ProofB* Proof::add_proof_b() {
  // @@protoc_insertion_point(field_add:zkprover.v1.Proof.proof_b)
  return _internal_add_proof_b();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zkprover::v1::ProofB >&
Proof::proof_b() const {
  // @@protoc_insertion_point(field_list:zkprover.v1.Proof.proof_b)
  return proof_b_;
}

// repeated string proof_c = 3;
inline int Proof::_internal_proof_c_size() const {
  return proof_c_.size();
}
inline int Proof::proof_c_size() const {
  return _internal_proof_c_size();
}
inline void Proof::clear_proof_c() {
  proof_c_.Clear();
}
inline std::string* Proof::add_proof_c() {
  // @@protoc_insertion_point(field_add_mutable:zkprover.v1.Proof.proof_c)
  return _internal_add_proof_c();
}
inline const std::string& Proof::_internal_proof_c(int index) const {
  return proof_c_.Get(index);
}
inline const std::string& Proof::proof_c(int index) const {
  // @@protoc_insertion_point(field_get:zkprover.v1.Proof.proof_c)
  return _internal_proof_c(index);
}
inline std::string* Proof::mutable_proof_c(int index) {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.Proof.proof_c)
  return proof_c_.Mutable(index);
}
inline void Proof::set_proof_c(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.Proof.proof_c)
  proof_c_.Mutable(index)->assign(value);
}
inline void Proof::set_proof_c(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zkprover.v1.Proof.proof_c)
  proof_c_.Mutable(index)->assign(std::move(value));
}
inline void Proof::set_proof_c(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proof_c_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zkprover.v1.Proof.proof_c)
}
inline void Proof::set_proof_c(int index, const char* value, size_t size) {
  proof_c_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.Proof.proof_c)
}
inline std::string* Proof::_internal_add_proof_c() {
  return proof_c_.Add();
}
inline void Proof::add_proof_c(const std::string& value) {
  proof_c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zkprover.v1.Proof.proof_c)
}
inline void Proof::add_proof_c(std::string&& value) {
  proof_c_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zkprover.v1.Proof.proof_c)
}
inline void Proof::add_proof_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proof_c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zkprover.v1.Proof.proof_c)
}
inline void Proof::add_proof_c(const char* value, size_t size) {
  proof_c_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zkprover.v1.Proof.proof_c)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Proof::proof_c() const {
  // @@protoc_insertion_point(field_list:zkprover.v1.Proof.proof_c)
  return proof_c_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Proof::mutable_proof_c() {
  // @@protoc_insertion_point(field_mutable_list:zkprover.v1.Proof.proof_c)
  return &proof_c_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InputProver

// .zkprover.v1.PublicInputs public_inputs = 1;
inline bool InputProver::_internal_has_public_inputs() const {
  return this != internal_default_instance() && public_inputs_ != nullptr;
}
inline bool InputProver::has_public_inputs() const {
  return _internal_has_public_inputs();
}
inline void InputProver::clear_public_inputs() {
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
}
inline const ::zkprover::v1::PublicInputs& InputProver::_internal_public_inputs() const {
  const ::zkprover::v1::PublicInputs* p = public_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::v1::PublicInputs*>(
      &::zkprover::v1::_PublicInputs_default_instance_);
}
inline const ::zkprover::v1::PublicInputs& InputProver::public_inputs() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.InputProver.public_inputs)
  return _internal_public_inputs();
}
inline void InputProver::unsafe_arena_set_allocated_public_inputs(
    ::zkprover::v1::PublicInputs* public_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_inputs_);
  }
  public_inputs_ = public_inputs;
  if (public_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.InputProver.public_inputs)
}
inline ::zkprover::v1::PublicInputs* InputProver::release_public_inputs() {
  auto temp = unsafe_arena_release_public_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::v1::PublicInputs* InputProver::unsafe_arena_release_public_inputs() {
  // @@protoc_insertion_point(field_release:zkprover.v1.InputProver.public_inputs)
  
  ::zkprover::v1::PublicInputs* temp = public_inputs_;
  public_inputs_ = nullptr;
  return temp;
}
inline ::zkprover::v1::PublicInputs* InputProver::_internal_mutable_public_inputs() {
  
  if (public_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::v1::PublicInputs>(GetArena());
    public_inputs_ = p;
  }
  return public_inputs_;
}
inline ::zkprover::v1::PublicInputs* InputProver::mutable_public_inputs() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.InputProver.public_inputs)
  return _internal_mutable_public_inputs();
}
inline void InputProver::set_allocated_public_inputs(::zkprover::v1::PublicInputs* public_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_inputs_;
  }
  if (public_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_inputs);
    if (message_arena != submessage_arena) {
      public_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_inputs, submessage_arena);
    }
    
  } else {
    
  }
  public_inputs_ = public_inputs;
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.InputProver.public_inputs)
}

// string global_exit_root = 2;
inline void InputProver::clear_global_exit_root() {
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputProver::global_exit_root() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.InputProver.global_exit_root)
  return _internal_global_exit_root();
}
inline void InputProver::set_global_exit_root(const std::string& value) {
  _internal_set_global_exit_root(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.InputProver.global_exit_root)
}
inline std::string* InputProver::mutable_global_exit_root() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.InputProver.global_exit_root)
  return _internal_mutable_global_exit_root();
}
inline const std::string& InputProver::_internal_global_exit_root() const {
  return global_exit_root_.Get();
}
inline void InputProver::_internal_set_global_exit_root(const std::string& value) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputProver::set_global_exit_root(std::string&& value) {
  
  global_exit_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.InputProver.global_exit_root)
}
inline void InputProver::set_global_exit_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.InputProver.global_exit_root)
}
inline void InputProver::set_global_exit_root(const char* value,
    size_t size) {
  
  global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.InputProver.global_exit_root)
}
inline std::string* InputProver::_internal_mutable_global_exit_root() {
  
  return global_exit_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputProver::release_global_exit_root() {
  // @@protoc_insertion_point(field_release:zkprover.v1.InputProver.global_exit_root)
  return global_exit_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputProver::set_allocated_global_exit_root(std::string* global_exit_root) {
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_exit_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.InputProver.global_exit_root)
}
inline std::string* InputProver::unsafe_arena_release_global_exit_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.InputProver.global_exit_root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return global_exit_root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputProver::unsafe_arena_set_allocated_global_exit_root(
    std::string* global_exit_root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  global_exit_root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      global_exit_root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.InputProver.global_exit_root)
}

// string batch_l2_data = 3;
inline void InputProver::clear_batch_l2_data() {
  batch_l2_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputProver::batch_l2_data() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.InputProver.batch_l2_data)
  return _internal_batch_l2_data();
}
inline void InputProver::set_batch_l2_data(const std::string& value) {
  _internal_set_batch_l2_data(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.InputProver.batch_l2_data)
}
inline std::string* InputProver::mutable_batch_l2_data() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.InputProver.batch_l2_data)
  return _internal_mutable_batch_l2_data();
}
inline const std::string& InputProver::_internal_batch_l2_data() const {
  return batch_l2_data_.Get();
}
inline void InputProver::_internal_set_batch_l2_data(const std::string& value) {
  
  batch_l2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputProver::set_batch_l2_data(std::string&& value) {
  
  batch_l2_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.InputProver.batch_l2_data)
}
inline void InputProver::set_batch_l2_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  batch_l2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.InputProver.batch_l2_data)
}
inline void InputProver::set_batch_l2_data(const char* value,
    size_t size) {
  
  batch_l2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.InputProver.batch_l2_data)
}
inline std::string* InputProver::_internal_mutable_batch_l2_data() {
  
  return batch_l2_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputProver::release_batch_l2_data() {
  // @@protoc_insertion_point(field_release:zkprover.v1.InputProver.batch_l2_data)
  return batch_l2_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputProver::set_allocated_batch_l2_data(std::string* batch_l2_data) {
  if (batch_l2_data != nullptr) {
    
  } else {
    
  }
  batch_l2_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), batch_l2_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.InputProver.batch_l2_data)
}
inline std::string* InputProver::unsafe_arena_release_batch_l2_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.InputProver.batch_l2_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return batch_l2_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputProver::unsafe_arena_set_allocated_batch_l2_data(
    std::string* batch_l2_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (batch_l2_data != nullptr) {
    
  } else {
    
  }
  batch_l2_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      batch_l2_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.InputProver.batch_l2_data)
}

// map<string, string> db = 4;
inline int InputProver::_internal_db_size() const {
  return db_.size();
}
inline int InputProver::db_size() const {
  return _internal_db_size();
}
inline void InputProver::clear_db() {
  db_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InputProver::_internal_db() const {
  return db_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InputProver::db() const {
  // @@protoc_insertion_point(field_map:zkprover.v1.InputProver.db)
  return _internal_db();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InputProver::_internal_mutable_db() {
  return db_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InputProver::mutable_db() {
  // @@protoc_insertion_point(field_mutable_map:zkprover.v1.InputProver.db)
  return _internal_mutable_db();
}

// map<string, string> contracts_bytecode = 5;
inline int InputProver::_internal_contracts_bytecode_size() const {
  return contracts_bytecode_.size();
}
inline int InputProver::contracts_bytecode_size() const {
  return _internal_contracts_bytecode_size();
}
inline void InputProver::clear_contracts_bytecode() {
  contracts_bytecode_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InputProver::_internal_contracts_bytecode() const {
  return contracts_bytecode_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InputProver::contracts_bytecode() const {
  // @@protoc_insertion_point(field_map:zkprover.v1.InputProver.contracts_bytecode)
  return _internal_contracts_bytecode();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InputProver::_internal_mutable_contracts_bytecode() {
  return contracts_bytecode_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InputProver::mutable_contracts_bytecode() {
  // @@protoc_insertion_point(field_mutable_map:zkprover.v1.InputProver.contracts_bytecode)
  return _internal_mutable_contracts_bytecode();
}

// -------------------------------------------------------------------

// PublicInputsExtended

// .zkprover.v1.PublicInputs public_inputs = 1;
inline bool PublicInputsExtended::_internal_has_public_inputs() const {
  return this != internal_default_instance() && public_inputs_ != nullptr;
}
inline bool PublicInputsExtended::has_public_inputs() const {
  return _internal_has_public_inputs();
}
inline void PublicInputsExtended::clear_public_inputs() {
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
}
inline const ::zkprover::v1::PublicInputs& PublicInputsExtended::_internal_public_inputs() const {
  const ::zkprover::v1::PublicInputs* p = public_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkprover::v1::PublicInputs*>(
      &::zkprover::v1::_PublicInputs_default_instance_);
}
inline const ::zkprover::v1::PublicInputs& PublicInputsExtended::public_inputs() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputsExtended.public_inputs)
  return _internal_public_inputs();
}
inline void PublicInputsExtended::unsafe_arena_set_allocated_public_inputs(
    ::zkprover::v1::PublicInputs* public_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_inputs_);
  }
  public_inputs_ = public_inputs;
  if (public_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputsExtended.public_inputs)
}
inline ::zkprover::v1::PublicInputs* PublicInputsExtended::release_public_inputs() {
  auto temp = unsafe_arena_release_public_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkprover::v1::PublicInputs* PublicInputsExtended::unsafe_arena_release_public_inputs() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputsExtended.public_inputs)
  
  ::zkprover::v1::PublicInputs* temp = public_inputs_;
  public_inputs_ = nullptr;
  return temp;
}
inline ::zkprover::v1::PublicInputs* PublicInputsExtended::_internal_mutable_public_inputs() {
  
  if (public_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkprover::v1::PublicInputs>(GetArena());
    public_inputs_ = p;
  }
  return public_inputs_;
}
inline ::zkprover::v1::PublicInputs* PublicInputsExtended::mutable_public_inputs() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputsExtended.public_inputs)
  return _internal_mutable_public_inputs();
}
inline void PublicInputsExtended::set_allocated_public_inputs(::zkprover::v1::PublicInputs* public_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_inputs_;
  }
  if (public_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_inputs);
    if (message_arena != submessage_arena) {
      public_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_inputs, submessage_arena);
    }
    
  } else {
    
  }
  public_inputs_ = public_inputs;
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputsExtended.public_inputs)
}

// string input_hash = 2;
inline void PublicInputsExtended::clear_input_hash() {
  input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicInputsExtended::input_hash() const {
  // @@protoc_insertion_point(field_get:zkprover.v1.PublicInputsExtended.input_hash)
  return _internal_input_hash();
}
inline void PublicInputsExtended::set_input_hash(const std::string& value) {
  _internal_set_input_hash(value);
  // @@protoc_insertion_point(field_set:zkprover.v1.PublicInputsExtended.input_hash)
}
inline std::string* PublicInputsExtended::mutable_input_hash() {
  // @@protoc_insertion_point(field_mutable:zkprover.v1.PublicInputsExtended.input_hash)
  return _internal_mutable_input_hash();
}
inline const std::string& PublicInputsExtended::_internal_input_hash() const {
  return input_hash_.Get();
}
inline void PublicInputsExtended::_internal_set_input_hash(const std::string& value) {
  
  input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicInputsExtended::set_input_hash(std::string&& value) {
  
  input_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkprover.v1.PublicInputsExtended.input_hash)
}
inline void PublicInputsExtended::set_input_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkprover.v1.PublicInputsExtended.input_hash)
}
inline void PublicInputsExtended::set_input_hash(const char* value,
    size_t size) {
  
  input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkprover.v1.PublicInputsExtended.input_hash)
}
inline std::string* PublicInputsExtended::_internal_mutable_input_hash() {
  
  return input_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicInputsExtended::release_input_hash() {
  // @@protoc_insertion_point(field_release:zkprover.v1.PublicInputsExtended.input_hash)
  return input_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicInputsExtended::set_allocated_input_hash(std::string* input_hash) {
  if (input_hash != nullptr) {
    
  } else {
    
  }
  input_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkprover.v1.PublicInputsExtended.input_hash)
}
inline std::string* PublicInputsExtended::unsafe_arena_release_input_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkprover.v1.PublicInputsExtended.input_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicInputsExtended::unsafe_arena_set_allocated_input_hash(
    std::string* input_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_hash != nullptr) {
    
  } else {
    
  }
  input_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkprover.v1.PublicInputsExtended.input_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace zkprover

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zkprover::v1::GetStatusResponse_StatusProver> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::v1::GetStatusResponse_StatusProver>() {
  return ::zkprover::v1::GetStatusResponse_StatusProver_descriptor();
}
template <> struct is_proto_enum< ::zkprover::v1::GenProofResponse_ResultGenProof> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::v1::GenProofResponse_ResultGenProof>() {
  return ::zkprover::v1::GenProofResponse_ResultGenProof_descriptor();
}
template <> struct is_proto_enum< ::zkprover::v1::CancelResponse_ResultCancel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::v1::CancelResponse_ResultCancel>() {
  return ::zkprover::v1::CancelResponse_ResultCancel_descriptor();
}
template <> struct is_proto_enum< ::zkprover::v1::GetProofResponse_ResultGetProof> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zkprover::v1::GetProofResponse_ResultGetProof>() {
  return ::zkprover::v1::GetProofResponse_ResultGetProof_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zk_5fprover_2eproto
