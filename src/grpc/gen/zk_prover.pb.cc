// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zk_prover.proto

#include "zk_prover.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InputProver_zk_5fprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputProver_ContractsBytecodeEntry_DoNotUse_zk_5fprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputProver_DbEntry_DoNotUse_zk_5fprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proof_zk_5fprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProofB_zk_5fprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicInputs_zk_5fprover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zk_5fprover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicInputsExtended_zk_5fprover_2eproto;
namespace zkprover {
namespace v1 {
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class GetStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusRequest> _instance;
} _GetStatusRequest_default_instance_;
class GenProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenProofRequest> _instance;
} _GenProofRequest_default_instance_;
class CancelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelRequest> _instance;
} _CancelRequest_default_instance_;
class GetProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProofRequest> _instance;
} _GetProofRequest_default_instance_;
class GetStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusResponse> _instance;
} _GetStatusResponse_default_instance_;
class GenProofResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenProofResponse> _instance;
} _GenProofResponse_default_instance_;
class CancelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelResponse> _instance;
} _CancelResponse_default_instance_;
class GetProofResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProofResponse> _instance;
} _GetProofResponse_default_instance_;
class PublicInputsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicInputs> _instance;
} _PublicInputs_default_instance_;
class ProofBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProofB> _instance;
} _ProofB_default_instance_;
class ProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proof> _instance;
} _Proof_default_instance_;
class InputProver_DbEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputProver_DbEntry_DoNotUse> _instance;
} _InputProver_DbEntry_DoNotUse_default_instance_;
class InputProver_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputProver_ContractsBytecodeEntry_DoNotUse> _instance;
} _InputProver_ContractsBytecodeEntry_DoNotUse_default_instance_;
class InputProverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputProver> _instance;
} _InputProver_default_instance_;
class PublicInputsExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicInputsExtended> _instance;
} _PublicInputsExtended_default_instance_;
}  // namespace v1
}  // namespace zkprover
static void InitDefaultsscc_info_CancelRequest_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_CancelRequest_default_instance_;
    new (ptr) ::zkprover::v1::CancelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::CancelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelRequest_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelRequest_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_CancelResponse_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_CancelResponse_default_instance_;
    new (ptr) ::zkprover::v1::CancelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::CancelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponse_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelResponse_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_GenProofRequest_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_GenProofRequest_default_instance_;
    new (ptr) ::zkprover::v1::GenProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::GenProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenProofRequest_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenProofRequest_zk_5fprover_2eproto}, {
      &scc_info_InputProver_zk_5fprover_2eproto.base,}};

static void InitDefaultsscc_info_GenProofResponse_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_GenProofResponse_default_instance_;
    new (ptr) ::zkprover::v1::GenProofResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::GenProofResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenProofResponse_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenProofResponse_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_GetProofRequest_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_GetProofRequest_default_instance_;
    new (ptr) ::zkprover::v1::GetProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::GetProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProofRequest_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProofRequest_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_GetProofResponse_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_GetProofResponse_default_instance_;
    new (ptr) ::zkprover::v1::GetProofResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::GetProofResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetProofResponse_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetProofResponse_zk_5fprover_2eproto}, {
      &scc_info_Proof_zk_5fprover_2eproto.base,
      &scc_info_PublicInputsExtended_zk_5fprover_2eproto.base,}};

static void InitDefaultsscc_info_GetStatusRequest_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_GetStatusRequest_default_instance_;
    new (ptr) ::zkprover::v1::GetStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::GetStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusRequest_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStatusRequest_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_GetStatusResponse_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_GetStatusResponse_default_instance_;
    new (ptr) ::zkprover::v1::GetStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::GetStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusResponse_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStatusResponse_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_InputProver_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_InputProver_default_instance_;
    new (ptr) ::zkprover::v1::InputProver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::InputProver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InputProver_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_InputProver_zk_5fprover_2eproto}, {
      &scc_info_PublicInputs_zk_5fprover_2eproto.base,
      &scc_info_InputProver_DbEntry_DoNotUse_zk_5fprover_2eproto.base,
      &scc_info_InputProver_ContractsBytecodeEntry_DoNotUse_zk_5fprover_2eproto.base,}};

static void InitDefaultsscc_info_InputProver_ContractsBytecodeEntry_DoNotUse_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_InputProver_ContractsBytecodeEntry_DoNotUse_default_instance_;
    new (ptr) ::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse();
  }
  ::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputProver_ContractsBytecodeEntry_DoNotUse_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputProver_ContractsBytecodeEntry_DoNotUse_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_InputProver_DbEntry_DoNotUse_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_InputProver_DbEntry_DoNotUse_default_instance_;
    new (ptr) ::zkprover::v1::InputProver_DbEntry_DoNotUse();
  }
  ::zkprover::v1::InputProver_DbEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputProver_DbEntry_DoNotUse_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputProver_DbEntry_DoNotUse_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_Proof_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_Proof_default_instance_;
    new (ptr) ::zkprover::v1::Proof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::Proof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proof_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Proof_zk_5fprover_2eproto}, {
      &scc_info_ProofB_zk_5fprover_2eproto.base,}};

static void InitDefaultsscc_info_ProofB_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_ProofB_default_instance_;
    new (ptr) ::zkprover::v1::ProofB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::ProofB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProofB_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProofB_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_PublicInputs_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_PublicInputs_default_instance_;
    new (ptr) ::zkprover::v1::PublicInputs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::PublicInputs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicInputs_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublicInputs_zk_5fprover_2eproto}, {}};

static void InitDefaultsscc_info_PublicInputsExtended_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_PublicInputsExtended_default_instance_;
    new (ptr) ::zkprover::v1::PublicInputsExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::PublicInputsExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicInputsExtended_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublicInputsExtended_zk_5fprover_2eproto}, {
      &scc_info_PublicInputs_zk_5fprover_2eproto.base,}};

static void InitDefaultsscc_info_Version_zk_5fprover_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zkprover::v1::_Version_default_instance_;
    new (ptr) ::zkprover::v1::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zkprover::v1::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_zk_5fprover_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_zk_5fprover_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zk_5fprover_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zk_5fprover_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zk_5fprover_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zk_5fprover_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::Version, v0_0_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GenProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GenProofRequest, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::CancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::CancelRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofRequest, id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, state_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, last_computed_request_id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, last_computed_end_time_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, current_computing_request_id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, current_computing_start_time_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, version_proto_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, version_server_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetStatusResponse, pending_request_queue_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GenProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GenProofResponse, id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GenProofResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::CancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::CancelResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofResponse, id_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofResponse, proof_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofResponse, public__),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofResponse, result_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::GetProofResponse, result_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, old_state_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, old_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, new_state_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, sequencer_addr_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, batch_hash_data_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, batch_num_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, eth_timestamp_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, aggregator_addr_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputs, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::ProofB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::ProofB, proofs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::Proof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::Proof, proof_a_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::Proof, proof_b_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::Proof, proof_c_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_DbEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver, public_inputs_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver, global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver, batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver, db_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::InputProver, contracts_bytecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputsExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputsExtended, public_inputs_),
  PROTOBUF_FIELD_OFFSET(::zkprover::v1::PublicInputsExtended, input_hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zkprover::v1::Version)},
  { 6, -1, sizeof(::zkprover::v1::GetStatusRequest)},
  { 11, -1, sizeof(::zkprover::v1::GenProofRequest)},
  { 17, -1, sizeof(::zkprover::v1::CancelRequest)},
  { 23, -1, sizeof(::zkprover::v1::GetProofRequest)},
  { 30, -1, sizeof(::zkprover::v1::GetStatusResponse)},
  { 43, -1, sizeof(::zkprover::v1::GenProofResponse)},
  { 50, -1, sizeof(::zkprover::v1::CancelResponse)},
  { 56, -1, sizeof(::zkprover::v1::GetProofResponse)},
  { 66, -1, sizeof(::zkprover::v1::PublicInputs)},
  { 81, -1, sizeof(::zkprover::v1::ProofB)},
  { 87, -1, sizeof(::zkprover::v1::Proof)},
  { 95, 102, sizeof(::zkprover::v1::InputProver_DbEntry_DoNotUse)},
  { 104, 111, sizeof(::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse)},
  { 113, -1, sizeof(::zkprover::v1::InputProver)},
  { 123, -1, sizeof(::zkprover::v1::PublicInputsExtended)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_GetStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_GenProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_CancelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_GetProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_GetStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_GenProofResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_CancelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_GetProofResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_PublicInputs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_ProofB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_Proof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_InputProver_DbEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_InputProver_ContractsBytecodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_InputProver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zkprover::v1::_PublicInputsExtended_default_instance_),
};

const char descriptor_table_protodef_zk_5fprover_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017zk_prover.proto\022\013zkprover.v1\"\031\n\007Versio"
  "n\022\016\n\006v0_0_1\030\001 \001(\t\"\022\n\020GetStatusRequest\":\n"
  "\017GenProofRequest\022\'\n\005input\030\001 \001(\0132\030.zkprov"
  "er.v1.InputProver\"\033\n\rCancelRequest\022\n\n\002id"
  "\030\001 \001(\t\".\n\017GetProofRequest\022\n\n\002id\030\001 \001(\t\022\017\n"
  "\007timeout\030\002 \001(\004\"\307\003\n\021GetStatusResponse\022:\n\005"
  "state\030\001 \001(\0162+.zkprover.v1.GetStatusRespo"
  "nse.StatusProver\022 \n\030last_computed_reques"
  "t_id\030\002 \001(\t\022\036\n\026last_computed_end_time\030\003 \001"
  "(\004\022$\n\034current_computing_request_id\030\004 \001(\t"
  "\022$\n\034current_computing_start_time\030\005 \001(\004\022\025"
  "\n\rversion_proto\030\006 \001(\t\022\026\n\016version_server\030"
  "\007 \001(\t\022!\n\031pending_request_queue_ids\030\010 \003(\t"
  "\"\225\001\n\014StatusProver\022\035\n\031STATUS_PROVER_UNSPE"
  "CIFIED\020\000\022\031\n\025STATUS_PROVER_BOOTING\020\001\022\033\n\027S"
  "TATUS_PROVER_COMPUTING\020\002\022\026\n\022STATUS_PROVE"
  "R_IDLE\020\003\022\026\n\022STATUS_PROVER_HALT\020\004\"\353\001\n\020Gen"
  "ProofResponse\022\n\n\002id\030\001 \001(\t\022<\n\006result\030\002 \001("
  "\0162,.zkprover.v1.GenProofResponse.ResultG"
  "enProof\"\214\001\n\016ResultGenProof\022 \n\034RESULT_GEN"
  "_PROOF_UNSPECIFIED\020\000\022\027\n\023RESULT_GEN_PROOF"
  "_OK\020\001\022\032\n\026RESULT_GEN_PROOF_ERROR\020\002\022#\n\037RES"
  "ULT_GEN_PROOF_INTERNAL_ERROR\020\003\"\250\001\n\016Cance"
  "lResponse\0228\n\006result\030\001 \001(\0162(.zkprover.v1."
  "CancelResponse.ResultCancel\"\\\n\014ResultCan"
  "cel\022\035\n\031RESULT_CANCEL_UNSPECIFIED\020\000\022\024\n\020RE"
  "SULT_CANCEL_OK\020\001\022\027\n\023RESULT_CANCEL_ERROR\020"
  "\002\"\303\003\n\020GetProofResponse\022\n\n\002id\030\001 \001(\t\022!\n\005pr"
  "oof\030\002 \001(\0132\022.zkprover.v1.Proof\0221\n\006public\030"
  "\003 \001(\0132!.zkprover.v1.PublicInputsExtended"
  "\022<\n\006result\030\004 \001(\0162,.zkprover.v1.GetProofR"
  "esponse.ResultGetProof\022\025\n\rresult_string\030"
  "\005 \001(\t\"\367\001\n\016ResultGetProof\022 \n\034RESULT_GET_P"
  "ROOF_UNSPECIFIED\020\000\022!\n\035RESULT_GET_PROOF_C"
  "OMPLETED_OK\020\001\022\032\n\026RESULT_GET_PROOF_ERROR\020"
  "\002\022$\n RESULT_GET_PROOF_COMPLETED_ERROR\020\003\022"
  "\034\n\030RESULT_GET_PROOF_PENDING\020\004\022#\n\037RESULT_"
  "GET_PROOF_INTERNAL_ERROR\020\005\022\033\n\027RESULT_GET"
  "_PROOF_CANCEL\020\006\"\376\001\n\014PublicInputs\022\026\n\016old_"
  "state_root\030\001 \001(\t\022\033\n\023old_local_exit_root\030"
  "\002 \001(\t\022\026\n\016new_state_root\030\003 \001(\t\022\033\n\023new_loc"
  "al_exit_root\030\004 \001(\t\022\026\n\016sequencer_addr\030\005 \001"
  "(\t\022\027\n\017batch_hash_data\030\006 \001(\t\022\021\n\tbatch_num"
  "\030\007 \001(\r\022\025\n\reth_timestamp\030\010 \001(\004\022\027\n\017aggrega"
  "tor_addr\030\t \001(\t\022\020\n\010chain_id\030\n \001(\004\"\030\n\006Proo"
  "fB\022\016\n\006proofs\030\001 \003(\t\"O\n\005Proof\022\017\n\007proof_a\030\001"
  " \003(\t\022$\n\007proof_b\030\002 \003(\0132\023.zkprover.v1.Proo"
  "fB\022\017\n\007proof_c\030\003 \003(\t\"\320\002\n\013InputProver\0220\n\rp"
  "ublic_inputs\030\001 \001(\0132\031.zkprover.v1.PublicI"
  "nputs\022\030\n\020global_exit_root\030\002 \001(\t\022\025\n\rbatch"
  "_l2_data\030\003 \001(\t\022,\n\002db\030\004 \003(\0132 .zkprover.v1"
  ".InputProver.DbEntry\022K\n\022contracts_byteco"
  "de\030\005 \003(\0132/.zkprover.v1.InputProver.Contr"
  "actsBytecodeEntry\032)\n\007DbEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026ContractsBytecod"
  "eEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\\"
  "\n\024PublicInputsExtended\0220\n\rpublic_inputs\030"
  "\001 \001(\0132\031.zkprover.v1.PublicInputs\022\022\n\ninpu"
  "t_hash\030\002 \001(\t2\276\002\n\017ZKProverService\022L\n\tGetS"
  "tatus\022\035.zkprover.v1.GetStatusRequest\032\036.z"
  "kprover.v1.GetStatusResponse\"\000\022I\n\010GenPro"
  "of\022\034.zkprover.v1.GenProofRequest\032\035.zkpro"
  "ver.v1.GenProofResponse\"\000\022C\n\006Cancel\022\032.zk"
  "prover.v1.CancelRequest\032\033.zkprover.v1.Ca"
  "ncelResponse\"\000\022M\n\010GetProof\022\034.zkprover.v1"
  ".GetProofRequest\032\035.zkprover.v1.GetProofR"
  "esponse\"\000(\0010\001B7Z5github.com/0xPolygonHer"
  "mez/zkevm-node/proverclient/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zk_5fprover_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zk_5fprover_2eproto_sccs[16] = {
  &scc_info_CancelRequest_zk_5fprover_2eproto.base,
  &scc_info_CancelResponse_zk_5fprover_2eproto.base,
  &scc_info_GenProofRequest_zk_5fprover_2eproto.base,
  &scc_info_GenProofResponse_zk_5fprover_2eproto.base,
  &scc_info_GetProofRequest_zk_5fprover_2eproto.base,
  &scc_info_GetProofResponse_zk_5fprover_2eproto.base,
  &scc_info_GetStatusRequest_zk_5fprover_2eproto.base,
  &scc_info_GetStatusResponse_zk_5fprover_2eproto.base,
  &scc_info_InputProver_zk_5fprover_2eproto.base,
  &scc_info_InputProver_ContractsBytecodeEntry_DoNotUse_zk_5fprover_2eproto.base,
  &scc_info_InputProver_DbEntry_DoNotUse_zk_5fprover_2eproto.base,
  &scc_info_Proof_zk_5fprover_2eproto.base,
  &scc_info_ProofB_zk_5fprover_2eproto.base,
  &scc_info_PublicInputs_zk_5fprover_2eproto.base,
  &scc_info_PublicInputsExtended_zk_5fprover_2eproto.base,
  &scc_info_Version_zk_5fprover_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zk_5fprover_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zk_5fprover_2eproto = {
  false, false, descriptor_table_protodef_zk_5fprover_2eproto, "zk_prover.proto", 2718,
  &descriptor_table_zk_5fprover_2eproto_once, descriptor_table_zk_5fprover_2eproto_sccs, descriptor_table_zk_5fprover_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_zk_5fprover_2eproto::offsets,
  file_level_metadata_zk_5fprover_2eproto, 16, file_level_enum_descriptors_zk_5fprover_2eproto, file_level_service_descriptors_zk_5fprover_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zk_5fprover_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zk_5fprover_2eproto)), true);
namespace zkprover {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetStatusResponse_StatusProver_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_5fprover_2eproto);
  return file_level_enum_descriptors_zk_5fprover_2eproto[0];
}
bool GetStatusResponse_StatusProver_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetStatusResponse_StatusProver GetStatusResponse::STATUS_PROVER_UNSPECIFIED;
constexpr GetStatusResponse_StatusProver GetStatusResponse::STATUS_PROVER_BOOTING;
constexpr GetStatusResponse_StatusProver GetStatusResponse::STATUS_PROVER_COMPUTING;
constexpr GetStatusResponse_StatusProver GetStatusResponse::STATUS_PROVER_IDLE;
constexpr GetStatusResponse_StatusProver GetStatusResponse::STATUS_PROVER_HALT;
constexpr GetStatusResponse_StatusProver GetStatusResponse::StatusProver_MIN;
constexpr GetStatusResponse_StatusProver GetStatusResponse::StatusProver_MAX;
constexpr int GetStatusResponse::StatusProver_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenProofResponse_ResultGenProof_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_5fprover_2eproto);
  return file_level_enum_descriptors_zk_5fprover_2eproto[1];
}
bool GenProofResponse_ResultGenProof_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GenProofResponse_ResultGenProof GenProofResponse::RESULT_GEN_PROOF_UNSPECIFIED;
constexpr GenProofResponse_ResultGenProof GenProofResponse::RESULT_GEN_PROOF_OK;
constexpr GenProofResponse_ResultGenProof GenProofResponse::RESULT_GEN_PROOF_ERROR;
constexpr GenProofResponse_ResultGenProof GenProofResponse::RESULT_GEN_PROOF_INTERNAL_ERROR;
constexpr GenProofResponse_ResultGenProof GenProofResponse::ResultGenProof_MIN;
constexpr GenProofResponse_ResultGenProof GenProofResponse::ResultGenProof_MAX;
constexpr int GenProofResponse::ResultGenProof_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelResponse_ResultCancel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_5fprover_2eproto);
  return file_level_enum_descriptors_zk_5fprover_2eproto[2];
}
bool CancelResponse_ResultCancel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CancelResponse_ResultCancel CancelResponse::RESULT_CANCEL_UNSPECIFIED;
constexpr CancelResponse_ResultCancel CancelResponse::RESULT_CANCEL_OK;
constexpr CancelResponse_ResultCancel CancelResponse::RESULT_CANCEL_ERROR;
constexpr CancelResponse_ResultCancel CancelResponse::ResultCancel_MIN;
constexpr CancelResponse_ResultCancel CancelResponse::ResultCancel_MAX;
constexpr int CancelResponse::ResultCancel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetProofResponse_ResultGetProof_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zk_5fprover_2eproto);
  return file_level_enum_descriptors_zk_5fprover_2eproto[3];
}
bool GetProofResponse_ResultGetProof_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetProofResponse_ResultGetProof GetProofResponse::RESULT_GET_PROOF_UNSPECIFIED;
constexpr GetProofResponse_ResultGetProof GetProofResponse::RESULT_GET_PROOF_COMPLETED_OK;
constexpr GetProofResponse_ResultGetProof GetProofResponse::RESULT_GET_PROOF_ERROR;
constexpr GetProofResponse_ResultGetProof GetProofResponse::RESULT_GET_PROOF_COMPLETED_ERROR;
constexpr GetProofResponse_ResultGetProof GetProofResponse::RESULT_GET_PROOF_PENDING;
constexpr GetProofResponse_ResultGetProof GetProofResponse::RESULT_GET_PROOF_INTERNAL_ERROR;
constexpr GetProofResponse_ResultGetProof GetProofResponse::RESULT_GET_PROOF_CANCEL;
constexpr GetProofResponse_ResultGetProof GetProofResponse::ResultGetProof_MIN;
constexpr GetProofResponse_ResultGetProof GetProofResponse::ResultGetProof_MAX;
constexpr int GetProofResponse::ResultGetProof_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v0_0_1().empty()) {
    v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v0_0_1(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.Version)
}

void Version::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Version_zk_5fprover_2eproto.base);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:zkprover.v1.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v0_0_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v0_0_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string v0_0_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v0_0_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.Version.v0_0_1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v0_0_1().data(), static_cast<int>(this->_internal_v0_0_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.Version.v0_0_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v0_0_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v0_0_1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v0_0_1().size() > 0) {
    _internal_set_v0_0_1(from._internal_v0_0_1());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v0_0_1_.Swap(&other->v0_0_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusRequest::InitAsDefaultInstance() {
}
class GetStatusRequest::_Internal {
 public:
};

GetStatusRequest::GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.GetStatusRequest)
}

void GetStatusRequest::SharedCtor() {
}

GetStatusRequest::~GetStatusRequest() {
  // @@protoc_insertion_point(destructor:zkprover.v1.GetStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetStatusRequest::ArenaDtor(void* object) {
  GetStatusRequest* _this = reinterpret_cast< GetStatusRequest* >(object);
  (void)_this;
}
void GetStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusRequest& GetStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusRequest_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void GetStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.GetStatusRequest)
  return target;
}

size_t GetStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.GetStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.GetStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.GetStatusRequest)
    MergeFrom(*source);
  }
}

void GetStatusRequest::MergeFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusRequest::CopyFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRequest::IsInitialized() const {
  return true;
}

void GetStatusRequest::InternalSwap(GetStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenProofRequest::InitAsDefaultInstance() {
  ::zkprover::v1::_GenProofRequest_default_instance_._instance.get_mutable()->input_ = const_cast< ::zkprover::v1::InputProver*>(
      ::zkprover::v1::InputProver::internal_default_instance());
}
class GenProofRequest::_Internal {
 public:
  static const ::zkprover::v1::InputProver& input(const GenProofRequest* msg);
};

const ::zkprover::v1::InputProver&
GenProofRequest::_Internal::input(const GenProofRequest* msg) {
  return *msg->input_;
}
GenProofRequest::GenProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.GenProofRequest)
}
GenProofRequest::GenProofRequest(const GenProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::zkprover::v1::InputProver(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.GenProofRequest)
}

void GenProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenProofRequest_zk_5fprover_2eproto.base);
  input_ = nullptr;
}

GenProofRequest::~GenProofRequest() {
  // @@protoc_insertion_point(destructor:zkprover.v1.GenProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete input_;
}

void GenProofRequest::ArenaDtor(void* object) {
  GenProofRequest* _this = reinterpret_cast< GenProofRequest* >(object);
  (void)_this;
}
void GenProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenProofRequest& GenProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenProofRequest_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void GenProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.GenProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.v1.InputProver input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.GenProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.v1.InputProver input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.GenProofRequest)
  return target;
}

size_t GenProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.GenProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zkprover.v1.InputProver input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.GenProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.GenProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.GenProofRequest)
    MergeFrom(*source);
  }
}

void GenProofRequest::MergeFrom(const GenProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.GenProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    _internal_mutable_input()->::zkprover::v1::InputProver::MergeFrom(from._internal_input());
  }
}

void GenProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.GenProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenProofRequest::CopyFrom(const GenProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.GenProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenProofRequest::IsInitialized() const {
  return true;
}

void GenProofRequest::InternalSwap(GenProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelRequest::InitAsDefaultInstance() {
}
class CancelRequest::_Internal {
 public:
};

CancelRequest::CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.CancelRequest)
}
CancelRequest::CancelRequest(const CancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.CancelRequest)
}

void CancelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelRequest_zk_5fprover_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelRequest::~CancelRequest() {
  // @@protoc_insertion_point(destructor:zkprover.v1.CancelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelRequest::ArenaDtor(void* object) {
  CancelRequest* _this = reinterpret_cast< CancelRequest* >(object);
  (void)_this;
}
void CancelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelRequest& CancelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelRequest_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void CancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.CancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.CancelRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.CancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.CancelRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.CancelRequest)
  return target;
}

size_t CancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.CancelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.CancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.CancelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.CancelRequest)
    MergeFrom(*source);
  }
}

void CancelRequest::MergeFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.CancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void CancelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelRequest::CopyFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRequest::IsInitialized() const {
  return true;
}

void CancelRequest::InternalSwap(CancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProofRequest::InitAsDefaultInstance() {
}
class GetProofRequest::_Internal {
 public:
};

GetProofRequest::GetProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.GetProofRequest)
}
GetProofRequest::GetProofRequest(const GetProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.GetProofRequest)
}

void GetProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProofRequest_zk_5fprover_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = PROTOBUF_ULONGLONG(0);
}

GetProofRequest::~GetProofRequest() {
  // @@protoc_insertion_point(destructor:zkprover.v1.GetProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProofRequest::ArenaDtor(void* object) {
  GetProofRequest* _this = reinterpret_cast< GetProofRequest* >(object);
  (void)_this;
}
void GetProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProofRequest& GetProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProofRequest_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void GetProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.GetProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeout_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetProofRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.GetProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetProofRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 timeout = 2;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.GetProofRequest)
  return target;
}

size_t GetProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.GetProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 timeout = 2;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.GetProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.GetProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.GetProofRequest)
    MergeFrom(*source);
  }
}

void GetProofRequest::MergeFrom(const GetProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.GetProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void GetProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.GetProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProofRequest::CopyFrom(const GetProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.GetProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProofRequest::IsInitialized() const {
  return true;
}

void GetProofRequest::InternalSwap(GetProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusResponse::InitAsDefaultInstance() {
}
class GetStatusResponse::_Internal {
 public:
};

GetStatusResponse::GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pending_request_queue_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pending_request_queue_ids_(from.pending_request_queue_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_computed_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_computed_request_id().empty()) {
    last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_computed_request_id(),
      GetArena());
  }
  current_computing_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_computing_request_id().empty()) {
    current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_computing_request_id(),
      GetArena());
  }
  version_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_proto().empty()) {
    version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version_proto(),
      GetArena());
  }
  version_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_server().empty()) {
    version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version_server(),
      GetArena());
  }
  ::memcpy(&last_computed_end_time_, &from.last_computed_end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.GetStatusResponse)
}

void GetStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatusResponse_zk_5fprover_2eproto.base);
  last_computed_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_computing_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_computed_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(state_));
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:zkprover.v1.GetStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_computed_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_computing_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_proto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStatusResponse::ArenaDtor(void* object) {
  GetStatusResponse* _this = reinterpret_cast< GetStatusResponse* >(object);
  (void)_this;
}
void GetStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusResponse& GetStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusResponse_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_request_queue_ids_.Clear();
  last_computed_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_computing_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_proto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_computed_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.v1.GetStatusResponse.StatusProver state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::zkprover::v1::GetStatusResponse_StatusProver>(val));
        } else goto handle_unusual;
        continue;
      // string last_computed_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_computed_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetStatusResponse.last_computed_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_computed_end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_computed_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_computing_request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_current_computing_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetStatusResponse.current_computing_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_computing_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_computing_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version_proto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetStatusResponse.version_proto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_server = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_version_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetStatusResponse.version_server"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string pending_request_queue_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pending_request_queue_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetStatusResponse.pending_request_queue_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.v1.GetStatusResponse.StatusProver state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // string last_computed_request_id = 2;
  if (this->last_computed_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_computed_request_id().data(), static_cast<int>(this->_internal_last_computed_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetStatusResponse.last_computed_request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_computed_request_id(), target);
  }

  // uint64 last_computed_end_time = 3;
  if (this->last_computed_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_computed_end_time(), target);
  }

  // string current_computing_request_id = 4;
  if (this->current_computing_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_computing_request_id().data(), static_cast<int>(this->_internal_current_computing_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetStatusResponse.current_computing_request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_current_computing_request_id(), target);
  }

  // uint64 current_computing_start_time = 5;
  if (this->current_computing_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_current_computing_start_time(), target);
  }

  // string version_proto = 6;
  if (this->version_proto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_proto().data(), static_cast<int>(this->_internal_version_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetStatusResponse.version_proto");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version_proto(), target);
  }

  // string version_server = 7;
  if (this->version_server().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_server().data(), static_cast<int>(this->_internal_version_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetStatusResponse.version_server");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_server(), target);
  }

  // repeated string pending_request_queue_ids = 8;
  for (int i = 0, n = this->_internal_pending_request_queue_ids_size(); i < n; i++) {
    const auto& s = this->_internal_pending_request_queue_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetStatusResponse.pending_request_queue_ids");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.GetStatusResponse)
  return target;
}

size_t GetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.GetStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pending_request_queue_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pending_request_queue_ids_.size());
  for (int i = 0, n = pending_request_queue_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pending_request_queue_ids_.Get(i));
  }

  // string last_computed_request_id = 2;
  if (this->last_computed_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_computed_request_id());
  }

  // string current_computing_request_id = 4;
  if (this->current_computing_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_computing_request_id());
  }

  // string version_proto = 6;
  if (this->version_proto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_proto());
  }

  // string version_server = 7;
  if (this->version_server().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_server());
  }

  // uint64 last_computed_end_time = 3;
  if (this->last_computed_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_computed_end_time());
  }

  // uint64 current_computing_start_time = 5;
  if (this->current_computing_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_computing_start_time());
  }

  // .zkprover.v1.GetStatusResponse.StatusProver state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.GetStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.GetStatusResponse)
    MergeFrom(*source);
  }
}

void GetStatusResponse::MergeFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_request_queue_ids_.MergeFrom(from.pending_request_queue_ids_);
  if (from.last_computed_request_id().size() > 0) {
    _internal_set_last_computed_request_id(from._internal_last_computed_request_id());
  }
  if (from.current_computing_request_id().size() > 0) {
    _internal_set_current_computing_request_id(from._internal_current_computing_request_id());
  }
  if (from.version_proto().size() > 0) {
    _internal_set_version_proto(from._internal_version_proto());
  }
  if (from.version_server().size() > 0) {
    _internal_set_version_server(from._internal_version_server());
  }
  if (from.last_computed_end_time() != 0) {
    _internal_set_last_computed_end_time(from._internal_last_computed_end_time());
  }
  if (from.current_computing_start_time() != 0) {
    _internal_set_current_computing_start_time(from._internal_current_computing_start_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GetStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {
  return true;
}

void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pending_request_queue_ids_.InternalSwap(&other->pending_request_queue_ids_);
  last_computed_request_id_.Swap(&other->last_computed_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_computing_request_id_.Swap(&other->current_computing_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_proto_.Swap(&other->version_proto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_server_.Swap(&other->version_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatusResponse, state_)
      + sizeof(GetStatusResponse::state_)
      - PROTOBUF_FIELD_OFFSET(GetStatusResponse, last_computed_end_time_)>(
          reinterpret_cast<char*>(&last_computed_end_time_),
          reinterpret_cast<char*>(&other->last_computed_end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenProofResponse::InitAsDefaultInstance() {
}
class GenProofResponse::_Internal {
 public:
};

GenProofResponse::GenProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.GenProofResponse)
}
GenProofResponse::GenProofResponse(const GenProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.GenProofResponse)
}

void GenProofResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenProofResponse_zk_5fprover_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

GenProofResponse::~GenProofResponse() {
  // @@protoc_insertion_point(destructor:zkprover.v1.GenProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenProofResponse::ArenaDtor(void* object) {
  GenProofResponse* _this = reinterpret_cast< GenProofResponse* >(object);
  (void)_this;
}
void GenProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenProofResponse& GenProofResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenProofResponse_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void GenProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.GenProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GenProofResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.v1.GenProofResponse.ResultGenProof result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::zkprover::v1::GenProofResponse_ResultGenProof>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.GenProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GenProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zkprover.v1.GenProofResponse.ResultGenProof result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.GenProofResponse)
  return target;
}

size_t GenProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.GenProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zkprover.v1.GenProofResponse.ResultGenProof result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.GenProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.GenProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.GenProofResponse)
    MergeFrom(*source);
  }
}

void GenProofResponse::MergeFrom(const GenProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.GenProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GenProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.GenProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenProofResponse::CopyFrom(const GenProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.GenProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenProofResponse::IsInitialized() const {
  return true;
}

void GenProofResponse::InternalSwap(GenProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelResponse::InitAsDefaultInstance() {
}
class CancelResponse::_Internal {
 public:
};

CancelResponse::CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.CancelResponse)
}
CancelResponse::CancelResponse(const CancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.CancelResponse)
}

void CancelResponse::SharedCtor() {
  result_ = 0;
}

CancelResponse::~CancelResponse() {
  // @@protoc_insertion_point(destructor:zkprover.v1.CancelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelResponse::ArenaDtor(void* object) {
  CancelResponse* _this = reinterpret_cast< CancelResponse* >(object);
  (void)_this;
}
void CancelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelResponse& CancelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelResponse_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void CancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.CancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.v1.CancelResponse.ResultCancel result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::zkprover::v1::CancelResponse_ResultCancel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.CancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.v1.CancelResponse.ResultCancel result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.CancelResponse)
  return target;
}

size_t CancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.CancelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zkprover.v1.CancelResponse.ResultCancel result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.CancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.CancelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.CancelResponse)
    MergeFrom(*source);
  }
}

void CancelResponse::MergeFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.CancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CancelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelResponse::CopyFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponse::IsInitialized() const {
  return true;
}

void CancelResponse::InternalSwap(CancelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProofResponse::InitAsDefaultInstance() {
  ::zkprover::v1::_GetProofResponse_default_instance_._instance.get_mutable()->proof_ = const_cast< ::zkprover::v1::Proof*>(
      ::zkprover::v1::Proof::internal_default_instance());
  ::zkprover::v1::_GetProofResponse_default_instance_._instance.get_mutable()->public__ = const_cast< ::zkprover::v1::PublicInputsExtended*>(
      ::zkprover::v1::PublicInputsExtended::internal_default_instance());
}
class GetProofResponse::_Internal {
 public:
  static const ::zkprover::v1::Proof& proof(const GetProofResponse* msg);
  static const ::zkprover::v1::PublicInputsExtended& public_(const GetProofResponse* msg);
};

const ::zkprover::v1::Proof&
GetProofResponse::_Internal::proof(const GetProofResponse* msg) {
  return *msg->proof_;
}
const ::zkprover::v1::PublicInputsExtended&
GetProofResponse::_Internal::public_(const GetProofResponse* msg) {
  return *msg->public__;
}
GetProofResponse::GetProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.GetProofResponse)
}
GetProofResponse::GetProofResponse(const GetProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_string().empty()) {
    result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_string(),
      GetArena());
  }
  if (from._internal_has_proof()) {
    proof_ = new ::zkprover::v1::Proof(*from.proof_);
  } else {
    proof_ = nullptr;
  }
  if (from._internal_has_public_()) {
    public__ = new ::zkprover::v1::PublicInputsExtended(*from.public__);
  } else {
    public__ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.GetProofResponse)
}

void GetProofResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProofResponse_zk_5fprover_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&proof_)) + sizeof(result_));
}

GetProofResponse::~GetProofResponse() {
  // @@protoc_insertion_point(destructor:zkprover.v1.GetProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
  if (this != internal_default_instance()) delete public__;
}

void GetProofResponse::ArenaDtor(void* object) {
  GetProofResponse* _this = reinterpret_cast< GetProofResponse* >(object);
  (void)_this;
}
void GetProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProofResponse& GetProofResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProofResponse_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void GetProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.GetProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
  if (GetArena() == nullptr && public__ != nullptr) {
    delete public__;
  }
  public__ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetProofResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.v1.Proof proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.v1.PublicInputsExtended public = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zkprover.v1.GetProofResponse.ResultGetProof result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::zkprover::v1::GetProofResponse_ResultGetProof>(val));
        } else goto handle_unusual;
        continue;
      // string result_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_result_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.GetProofResponse.result_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.GetProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zkprover.v1.Proof proof = 2;
  if (this->has_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::proof(this), target, stream);
  }

  // .zkprover.v1.PublicInputsExtended public = 3;
  if (this->has_public_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::public_(this), target, stream);
  }

  // .zkprover.v1.GetProofResponse.ResultGetProof result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // string result_string = 5;
  if (this->result_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.GetProofResponse.result_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_result_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.GetProofResponse)
  return target;
}

size_t GetProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.GetProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string result_string = 5;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .zkprover.v1.Proof proof = 2;
  if (this->has_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proof_);
  }

  // .zkprover.v1.PublicInputsExtended public = 3;
  if (this->has_public_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public__);
  }

  // .zkprover.v1.GetProofResponse.ResultGetProof result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.GetProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.GetProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.GetProofResponse)
    MergeFrom(*source);
  }
}

void GetProofResponse::MergeFrom(const GetProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.GetProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result_string().size() > 0) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from.has_proof()) {
    _internal_mutable_proof()->::zkprover::v1::Proof::MergeFrom(from._internal_proof());
  }
  if (from.has_public_()) {
    _internal_mutable_public_()->::zkprover::v1::PublicInputsExtended::MergeFrom(from._internal_public_());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GetProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.GetProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProofResponse::CopyFrom(const GetProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.GetProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProofResponse::IsInitialized() const {
  return true;
}

void GetProofResponse::InternalSwap(GetProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.Swap(&other->result_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetProofResponse, result_)
      + sizeof(GetProofResponse::result_)
      - PROTOBUF_FIELD_OFFSET(GetProofResponse, proof_)>(
          reinterpret_cast<char*>(&proof_),
          reinterpret_cast<char*>(&other->proof_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublicInputs::InitAsDefaultInstance() {
}
class PublicInputs::_Internal {
 public:
};

PublicInputs::PublicInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.PublicInputs)
}
PublicInputs::PublicInputs(const PublicInputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  old_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_local_exit_root().empty()) {
    old_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_local_exit_root(),
      GetArena());
  }
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_state_root().empty()) {
    new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_state_root(),
      GetArena());
  }
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_local_exit_root().empty()) {
    new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_local_exit_root(),
      GetArena());
  }
  sequencer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequencer_addr().empty()) {
    sequencer_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequencer_addr(),
      GetArena());
  }
  batch_hash_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_hash_data().empty()) {
    batch_hash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_hash_data(),
      GetArena());
  }
  aggregator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aggregator_addr().empty()) {
    aggregator_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aggregator_addr(),
      GetArena());
  }
  ::memcpy(&eth_timestamp_, &from.eth_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_num_) -
    reinterpret_cast<char*>(&eth_timestamp_)) + sizeof(batch_num_));
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.PublicInputs)
}

void PublicInputs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicInputs_zk_5fprover_2eproto.base);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aggregator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&eth_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_num_) -
      reinterpret_cast<char*>(&eth_timestamp_)) + sizeof(batch_num_));
}

PublicInputs::~PublicInputs() {
  // @@protoc_insertion_point(destructor:zkprover.v1.PublicInputs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicInputs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencer_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aggregator_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublicInputs::ArenaDtor(void* object) {
  PublicInputs* _this = reinterpret_cast< PublicInputs* >(object);
  (void)_this;
}
void PublicInputs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicInputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicInputs& PublicInputs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicInputs_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void PublicInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.PublicInputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sequencer_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aggregator_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&eth_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_num_) -
      reinterpret_cast<char*>(&eth_timestamp_)) + sizeof(batch_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicInputs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputs.old_state_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string old_local_exit_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_old_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputs.old_local_exit_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_state_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputs.new_state_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_local_exit_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputs.new_local_exit_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequencer_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sequencer_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputs.sequencer_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string batch_hash_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_batch_hash_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputs.batch_hash_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 batch_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 eth_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          eth_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aggregator_addr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_aggregator_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputs.aggregator_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chain_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicInputs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.PublicInputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_state_root().data(), static_cast<int>(this->_internal_old_state_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputs.old_state_root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // string old_local_exit_root = 2;
  if (this->old_local_exit_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_local_exit_root().data(), static_cast<int>(this->_internal_old_local_exit_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputs.old_local_exit_root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_old_local_exit_root(), target);
  }

  // string new_state_root = 3;
  if (this->new_state_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_state_root().data(), static_cast<int>(this->_internal_new_state_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputs.new_state_root");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_state_root(), target);
  }

  // string new_local_exit_root = 4;
  if (this->new_local_exit_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_local_exit_root().data(), static_cast<int>(this->_internal_new_local_exit_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputs.new_local_exit_root");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_local_exit_root(), target);
  }

  // string sequencer_addr = 5;
  if (this->sequencer_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequencer_addr().data(), static_cast<int>(this->_internal_sequencer_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputs.sequencer_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sequencer_addr(), target);
  }

  // string batch_hash_data = 6;
  if (this->batch_hash_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_hash_data().data(), static_cast<int>(this->_internal_batch_hash_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputs.batch_hash_data");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_batch_hash_data(), target);
  }

  // uint32 batch_num = 7;
  if (this->batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_batch_num(), target);
  }

  // uint64 eth_timestamp = 8;
  if (this->eth_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_eth_timestamp(), target);
  }

  // string aggregator_addr = 9;
  if (this->aggregator_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregator_addr().data(), static_cast<int>(this->_internal_aggregator_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputs.aggregator_addr");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_aggregator_addr(), target);
  }

  // uint64 chain_id = 10;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.PublicInputs)
  return target;
}

size_t PublicInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.PublicInputs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_state_root());
  }

  // string old_local_exit_root = 2;
  if (this->old_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_local_exit_root());
  }

  // string new_state_root = 3;
  if (this->new_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_state_root());
  }

  // string new_local_exit_root = 4;
  if (this->new_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_local_exit_root());
  }

  // string sequencer_addr = 5;
  if (this->sequencer_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequencer_addr());
  }

  // string batch_hash_data = 6;
  if (this->batch_hash_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_hash_data());
  }

  // string aggregator_addr = 9;
  if (this->aggregator_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregator_addr());
  }

  // uint64 eth_timestamp = 8;
  if (this->eth_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_eth_timestamp());
  }

  // uint64 chain_id = 10;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chain_id());
  }

  // uint32 batch_num = 7;
  if (this->batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicInputs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.PublicInputs)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicInputs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicInputs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.PublicInputs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.PublicInputs)
    MergeFrom(*source);
  }
}

void PublicInputs::MergeFrom(const PublicInputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.PublicInputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.old_local_exit_root().size() > 0) {
    _internal_set_old_local_exit_root(from._internal_old_local_exit_root());
  }
  if (from.new_state_root().size() > 0) {
    _internal_set_new_state_root(from._internal_new_state_root());
  }
  if (from.new_local_exit_root().size() > 0) {
    _internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from.sequencer_addr().size() > 0) {
    _internal_set_sequencer_addr(from._internal_sequencer_addr());
  }
  if (from.batch_hash_data().size() > 0) {
    _internal_set_batch_hash_data(from._internal_batch_hash_data());
  }
  if (from.aggregator_addr().size() > 0) {
    _internal_set_aggregator_addr(from._internal_aggregator_addr());
  }
  if (from.eth_timestamp() != 0) {
    _internal_set_eth_timestamp(from._internal_eth_timestamp());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.batch_num() != 0) {
    _internal_set_batch_num(from._internal_batch_num());
  }
}

void PublicInputs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.PublicInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicInputs::CopyFrom(const PublicInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.PublicInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicInputs::IsInitialized() const {
  return true;
}

void PublicInputs::InternalSwap(PublicInputs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_local_exit_root_.Swap(&other->old_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_state_root_.Swap(&other->new_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.Swap(&other->new_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sequencer_addr_.Swap(&other->sequencer_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_data_.Swap(&other->batch_hash_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aggregator_addr_.Swap(&other->aggregator_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicInputs, batch_num_)
      + sizeof(PublicInputs::batch_num_)
      - PROTOBUF_FIELD_OFFSET(PublicInputs, eth_timestamp_)>(
          reinterpret_cast<char*>(&eth_timestamp_),
          reinterpret_cast<char*>(&other->eth_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicInputs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProofB::InitAsDefaultInstance() {
}
class ProofB::_Internal {
 public:
};

ProofB::ProofB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proofs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.ProofB)
}
ProofB::ProofB(const ProofB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proofs_(from.proofs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.ProofB)
}

void ProofB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProofB_zk_5fprover_2eproto.base);
}

ProofB::~ProofB() {
  // @@protoc_insertion_point(destructor:zkprover.v1.ProofB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProofB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProofB::ArenaDtor(void* object) {
  ProofB* _this = reinterpret_cast< ProofB* >(object);
  (void)_this;
}
void ProofB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProofB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProofB& ProofB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProofB_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void ProofB::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.ProofB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proofs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string proofs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proofs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.ProofB.proofs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProofB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.ProofB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string proofs = 1;
  for (int i = 0, n = this->_internal_proofs_size(); i < n; i++) {
    const auto& s = this->_internal_proofs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.ProofB.proofs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.ProofB)
  return target;
}

size_t ProofB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.ProofB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proofs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proofs_.size());
  for (int i = 0, n = proofs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proofs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProofB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.ProofB)
  GOOGLE_DCHECK_NE(&from, this);
  const ProofB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProofB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.ProofB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.ProofB)
    MergeFrom(*source);
  }
}

void ProofB::MergeFrom(const ProofB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.ProofB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proofs_.MergeFrom(from.proofs_);
}

void ProofB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.ProofB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofB::CopyFrom(const ProofB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.ProofB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofB::IsInitialized() const {
  return true;
}

void ProofB::InternalSwap(ProofB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proofs_.InternalSwap(&other->proofs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proof::InitAsDefaultInstance() {
}
class Proof::_Internal {
 public:
};

Proof::Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proof_a_(arena),
  proof_b_(arena),
  proof_c_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.Proof)
}
Proof::Proof(const Proof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proof_a_(from.proof_a_),
      proof_b_(from.proof_b_),
      proof_c_(from.proof_c_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.Proof)
}

void Proof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proof_zk_5fprover_2eproto.base);
}

Proof::~Proof() {
  // @@protoc_insertion_point(destructor:zkprover.v1.Proof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Proof::ArenaDtor(void* object) {
  Proof* _this = reinterpret_cast< Proof* >(object);
  (void)_this;
}
void Proof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proof& Proof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proof_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void Proof::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.Proof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proof_a_.Clear();
  proof_b_.Clear();
  proof_c_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string proof_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proof_a();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.Proof.proof_a"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zkprover.v1.ProofB proof_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proof_b(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string proof_c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proof_c();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.Proof.proof_c"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.Proof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string proof_a = 1;
  for (int i = 0, n = this->_internal_proof_a_size(); i < n; i++) {
    const auto& s = this->_internal_proof_a(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.Proof.proof_a");
    target = stream->WriteString(1, s, target);
  }

  // repeated .zkprover.v1.ProofB proof_b = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proof_b_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_proof_b(i), target, stream);
  }

  // repeated string proof_c = 3;
  for (int i = 0, n = this->_internal_proof_c_size(); i < n; i++) {
    const auto& s = this->_internal_proof_c(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.Proof.proof_c");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.Proof)
  return target;
}

size_t Proof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.Proof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proof_a = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proof_a_.size());
  for (int i = 0, n = proof_a_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proof_a_.Get(i));
  }

  // repeated .zkprover.v1.ProofB proof_b = 2;
  total_size += 1UL * this->_internal_proof_b_size();
  for (const auto& msg : this->proof_b_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string proof_c = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proof_c_.size());
  for (int i = 0, n = proof_c_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proof_c_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.Proof)
  GOOGLE_DCHECK_NE(&from, this);
  const Proof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.Proof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.Proof)
    MergeFrom(*source);
  }
}

void Proof::MergeFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.Proof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proof_a_.MergeFrom(from.proof_a_);
  proof_b_.MergeFrom(from.proof_b_);
  proof_c_.MergeFrom(from.proof_c_);
}

void Proof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proof::CopyFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proof::IsInitialized() const {
  return true;
}

void Proof::InternalSwap(Proof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proof_a_.InternalSwap(&other->proof_a_);
  proof_b_.InternalSwap(&other->proof_b_);
  proof_c_.InternalSwap(&other->proof_c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InputProver_DbEntry_DoNotUse::InputProver_DbEntry_DoNotUse() {}
InputProver_DbEntry_DoNotUse::InputProver_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InputProver_DbEntry_DoNotUse::MergeFrom(const InputProver_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InputProver_DbEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InputProver_DbEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

InputProver_ContractsBytecodeEntry_DoNotUse::InputProver_ContractsBytecodeEntry_DoNotUse() {}
InputProver_ContractsBytecodeEntry_DoNotUse::InputProver_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InputProver_ContractsBytecodeEntry_DoNotUse::MergeFrom(const InputProver_ContractsBytecodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InputProver_ContractsBytecodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InputProver_ContractsBytecodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InputProver::InitAsDefaultInstance() {
  ::zkprover::v1::_InputProver_default_instance_._instance.get_mutable()->public_inputs_ = const_cast< ::zkprover::v1::PublicInputs*>(
      ::zkprover::v1::PublicInputs::internal_default_instance());
}
class InputProver::_Internal {
 public:
  static const ::zkprover::v1::PublicInputs& public_inputs(const InputProver* msg);
};

const ::zkprover::v1::PublicInputs&
InputProver::_Internal::public_inputs(const InputProver* msg) {
  return *msg->public_inputs_;
}
InputProver::InputProver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  db_(arena),
  contracts_bytecode_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.InputProver)
}
InputProver::InputProver(const InputProver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_exit_root().empty()) {
    global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_exit_root(),
      GetArena());
  }
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_l2_data().empty()) {
    batch_l2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_l2_data(),
      GetArena());
  }
  if (from._internal_has_public_inputs()) {
    public_inputs_ = new ::zkprover::v1::PublicInputs(*from.public_inputs_);
  } else {
    public_inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.InputProver)
}

void InputProver::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputProver_zk_5fprover_2eproto.base);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_inputs_ = nullptr;
}

InputProver::~InputProver() {
  // @@protoc_insertion_point(destructor:zkprover.v1.InputProver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputProver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  global_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_inputs_;
}

void InputProver::ArenaDtor(void* object) {
  InputProver* _this = reinterpret_cast< InputProver* >(object);
  (void)_this;
}
void InputProver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputProver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputProver& InputProver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputProver_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void InputProver::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.InputProver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_.Clear();
  contracts_bytecode_.Clear();
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputProver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.v1.PublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string global_exit_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.InputProver.global_exit_root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string batch_l2_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.InputProver.batch_l2_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> db = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> contracts_bytecode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&contracts_bytecode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputProver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.InputProver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.v1.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_inputs(this), target, stream);
  }

  // string global_exit_root = 2;
  if (this->global_exit_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_global_exit_root().data(), static_cast<int>(this->_internal_global_exit_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.InputProver.global_exit_root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_global_exit_root(), target);
  }

  // string batch_l2_data = 3;
  if (this->batch_l2_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batch_l2_data().data(), static_cast<int>(this->_internal_batch_l2_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.InputProver.batch_l2_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_batch_l2_data(), target);
  }

  // map<string, string> db = 4;
  if (!this->_internal_db().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.v1.InputProver.DbEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.v1.InputProver.DbEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InputProver_DbEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it) {
        target = InputProver_DbEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> contracts_bytecode = 5;
  if (!this->_internal_contracts_bytecode().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.v1.InputProver.ContractsBytecodeEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zkprover.v1.InputProver.ContractsBytecodeEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_contracts_bytecode().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_contracts_bytecode().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InputProver_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it) {
        target = InputProver_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.InputProver)
  return target;
}

size_t InputProver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.InputProver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> db = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += InputProver_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> contracts_bytecode = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_bytecode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts_bytecode().begin();
      it != this->_internal_contracts_bytecode().end(); ++it) {
    total_size += InputProver_ContractsBytecodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string global_exit_root = 2;
  if (this->global_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_exit_root());
  }

  // string batch_l2_data = 3;
  if (this->batch_l2_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batch_l2_data());
  }

  // .zkprover.v1.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_inputs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputProver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.InputProver)
  GOOGLE_DCHECK_NE(&from, this);
  const InputProver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputProver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.InputProver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.InputProver)
    MergeFrom(*source);
  }
}

void InputProver::MergeFrom(const InputProver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.InputProver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  if (from.global_exit_root().size() > 0) {
    _internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (from.batch_l2_data().size() > 0) {
    _internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (from.has_public_inputs()) {
    _internal_mutable_public_inputs()->::zkprover::v1::PublicInputs::MergeFrom(from._internal_public_inputs());
  }
}

void InputProver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.InputProver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputProver::CopyFrom(const InputProver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.InputProver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputProver::IsInitialized() const {
  return true;
}

void InputProver::InternalSwap(InputProver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_.Swap(&other->db_);
  contracts_bytecode_.Swap(&other->contracts_bytecode_);
  global_exit_root_.Swap(&other->global_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.Swap(&other->batch_l2_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_inputs_, other->public_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputProver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublicInputsExtended::InitAsDefaultInstance() {
  ::zkprover::v1::_PublicInputsExtended_default_instance_._instance.get_mutable()->public_inputs_ = const_cast< ::zkprover::v1::PublicInputs*>(
      ::zkprover::v1::PublicInputs::internal_default_instance());
}
class PublicInputsExtended::_Internal {
 public:
  static const ::zkprover::v1::PublicInputs& public_inputs(const PublicInputsExtended* msg);
};

const ::zkprover::v1::PublicInputs&
PublicInputsExtended::_Internal::public_inputs(const PublicInputsExtended* msg) {
  return *msg->public_inputs_;
}
PublicInputsExtended::PublicInputsExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zkprover.v1.PublicInputsExtended)
}
PublicInputsExtended::PublicInputsExtended(const PublicInputsExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_hash().empty()) {
    input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_hash(),
      GetArena());
  }
  if (from._internal_has_public_inputs()) {
    public_inputs_ = new ::zkprover::v1::PublicInputs(*from.public_inputs_);
  } else {
    public_inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zkprover.v1.PublicInputsExtended)
}

void PublicInputsExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicInputsExtended_zk_5fprover_2eproto.base);
  input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_inputs_ = nullptr;
}

PublicInputsExtended::~PublicInputsExtended() {
  // @@protoc_insertion_point(destructor:zkprover.v1.PublicInputsExtended)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicInputsExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_inputs_;
}

void PublicInputsExtended::ArenaDtor(void* object) {
  PublicInputsExtended* _this = reinterpret_cast< PublicInputsExtended* >(object);
  (void)_this;
}
void PublicInputsExtended::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicInputsExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicInputsExtended& PublicInputsExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicInputsExtended_zk_5fprover_2eproto.base);
  return *internal_default_instance();
}


void PublicInputsExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:zkprover.v1.PublicInputsExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && public_inputs_ != nullptr) {
    delete public_inputs_;
  }
  public_inputs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicInputsExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zkprover.v1.PublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zkprover.v1.PublicInputsExtended.input_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicInputsExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zkprover.v1.PublicInputsExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zkprover.v1.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_inputs(this), target, stream);
  }

  // string input_hash = 2;
  if (this->input_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_hash().data(), static_cast<int>(this->_internal_input_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zkprover.v1.PublicInputsExtended.input_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zkprover.v1.PublicInputsExtended)
  return target;
}

size_t PublicInputsExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zkprover.v1.PublicInputsExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_hash = 2;
  if (this->input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_hash());
  }

  // .zkprover.v1.PublicInputs public_inputs = 1;
  if (this->has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_inputs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicInputsExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zkprover.v1.PublicInputsExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicInputsExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicInputsExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zkprover.v1.PublicInputsExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zkprover.v1.PublicInputsExtended)
    MergeFrom(*source);
  }
}

void PublicInputsExtended::MergeFrom(const PublicInputsExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zkprover.v1.PublicInputsExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_hash().size() > 0) {
    _internal_set_input_hash(from._internal_input_hash());
  }
  if (from.has_public_inputs()) {
    _internal_mutable_public_inputs()->::zkprover::v1::PublicInputs::MergeFrom(from._internal_public_inputs());
  }
}

void PublicInputsExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zkprover.v1.PublicInputsExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicInputsExtended::CopyFrom(const PublicInputsExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zkprover.v1.PublicInputsExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicInputsExtended::IsInitialized() const {
  return true;
}

void PublicInputsExtended::InternalSwap(PublicInputsExtended* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_hash_.Swap(&other->input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_inputs_, other->public_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicInputsExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace zkprover
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zkprover::v1::Version* Arena::CreateMaybeMessage< ::zkprover::v1::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::GetStatusRequest* Arena::CreateMaybeMessage< ::zkprover::v1::GetStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::GetStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::GenProofRequest* Arena::CreateMaybeMessage< ::zkprover::v1::GenProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::GenProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::CancelRequest* Arena::CreateMaybeMessage< ::zkprover::v1::CancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::CancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::GetProofRequest* Arena::CreateMaybeMessage< ::zkprover::v1::GetProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::GetProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::GetStatusResponse* Arena::CreateMaybeMessage< ::zkprover::v1::GetStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::GetStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::GenProofResponse* Arena::CreateMaybeMessage< ::zkprover::v1::GenProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::GenProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::CancelResponse* Arena::CreateMaybeMessage< ::zkprover::v1::CancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::CancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::GetProofResponse* Arena::CreateMaybeMessage< ::zkprover::v1::GetProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::GetProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::PublicInputs* Arena::CreateMaybeMessage< ::zkprover::v1::PublicInputs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::PublicInputs >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::ProofB* Arena::CreateMaybeMessage< ::zkprover::v1::ProofB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::ProofB >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::Proof* Arena::CreateMaybeMessage< ::zkprover::v1::Proof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::Proof >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::InputProver_DbEntry_DoNotUse* Arena::CreateMaybeMessage< ::zkprover::v1::InputProver_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::InputProver_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::InputProver_ContractsBytecodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::InputProver* Arena::CreateMaybeMessage< ::zkprover::v1::InputProver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::InputProver >(arena);
}
template<> PROTOBUF_NOINLINE ::zkprover::v1::PublicInputsExtended* Arena::CreateMaybeMessage< ::zkprover::v1::PublicInputsExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zkprover::v1::PublicInputsExtended >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
