// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zk_prover.proto
#ifndef GRPC_zk_5fprover_2eproto__INCLUDED
#define GRPC_zk_5fprover_2eproto__INCLUDED

#include "zk_prover.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zkprover {
namespace v1 {

// timestamps are represented in unix time in seconds
//
// *
// Define all methods implementes by the gRPC
// GetStatus: get server report about its current state (non-blocking call)
// GenProof: ask prover to start proof generation. If prover is biusy, request is queued (non-blocking call)
// Cancel: ask prover to cancel specific proof (non-blocking call)
// GetProof: retrieve proof information given a timeout (blocking call)
class ZKProverService final {
 public:
  static constexpr char const* service_full_name() {
    return "zkprover.v1.ZKProverService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::zkprover::v1::GetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::zkprover::v1::GenProofResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GenProofResponse>> AsyncGenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GenProofResponse>>(AsyncGenProofRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GenProofResponse>> PrepareAsyncGenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GenProofResponse>>(PrepareAsyncGenProofRaw(context, request, cq));
    }
    virtual ::grpc::Status Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::zkprover::v1::CancelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::CancelResponse>> AsyncCancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::CancelResponse>>(AsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::CancelResponse>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::CancelResponse>>(PrepareAsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>> GetProof(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>>(GetProofRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>> AsyncGetProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>>(AsyncGetProofRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>> PrepareAsyncGetProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>>(PrepareAsyncGetProofRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GenProofResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GenProofResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GenProofResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::CancelResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::CancelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetProof(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::zkprover::v1::GetProofRequest,::zkprover::v1::GetProofResponse>* reactor) = 0;
      #else
      virtual void GetProof(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::zkprover::v1::GetProofRequest,::zkprover::v1::GetProofResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GenProofResponse>* AsyncGenProofRaw(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::GenProofResponse>* PrepareAsyncGenProofRaw(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::CancelResponse>* AsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zkprover::v1::CancelResponse>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* GetProofRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* AsyncGetProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* PrepareAsyncGetProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::zkprover::v1::GetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::zkprover::v1::GenProofResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GenProofResponse>> AsyncGenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GenProofResponse>>(AsyncGenProofRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GenProofResponse>> PrepareAsyncGenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GenProofResponse>>(PrepareAsyncGenProofRaw(context, request, cq));
    }
    ::grpc::Status Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::zkprover::v1::CancelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::CancelResponse>> AsyncCancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::CancelResponse>>(AsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::CancelResponse>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zkprover::v1::CancelResponse>>(PrepareAsyncCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>> GetProof(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>>(GetProofRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>> AsyncGetProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>>(AsyncGetProofRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>> PrepareAsyncGetProof(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>>(PrepareAsyncGetProofRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStatus(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response, std::function<void(::grpc::Status)>) override;
      void GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GenProofResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GenProof(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GenProofResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GenProof(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::GenProofResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response, std::function<void(::grpc::Status)>) override;
      void Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::CancelResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Cancel(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Cancel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zkprover::v1::CancelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetProof(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::zkprover::v1::GetProofRequest,::zkprover::v1::GetProofResponse>* reactor) override;
      #else
      void GetProof(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::zkprover::v1::GetProofRequest,::zkprover::v1::GetProofResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::zkprover::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GenProofResponse>* AsyncGenProofRaw(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::v1::GenProofResponse>* PrepareAsyncGenProofRaw(::grpc::ClientContext* context, const ::zkprover::v1::GenProofRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::v1::CancelResponse>* AsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zkprover::v1::CancelResponse>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::zkprover::v1::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* GetProofRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* AsyncGetProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* PrepareAsyncGetProofRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GenProof_;
    const ::grpc::internal::RpcMethod rpcmethod_Cancel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProof_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response);
    virtual ::grpc::Status GenProof(::grpc::ServerContext* context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response);
    virtual ::grpc::Status Cancel(::grpc::ServerContext* context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response);
    virtual ::grpc::Status GetProof(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::zkprover::v1::GetProofResponse, ::zkprover::v1::GetProofRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::zkprover::v1::GetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::zkprover::v1::GetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenProof() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenProof(::grpc::ServerContext* context, ::zkprover::v1::GenProofRequest* request, ::grpc::ServerAsyncResponseWriter< ::zkprover::v1::GenProofResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Cancel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancel(::grpc::ServerContext* context, ::zkprover::v1::CancelRequest* request, ::grpc::ServerAsyncResponseWriter< ::zkprover::v1::CancelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProof() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::v1::GetProofResponse, ::zkprover::v1::GetProofRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProof(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::zkprover::v1::GetProofResponse, ::zkprover::v1::GetProofRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStatus<WithAsyncMethod_GenProof<WithAsyncMethod_Cancel<WithAsyncMethod_GetProof<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zkprover::v1::GetStatusRequest, ::zkprover::v1::GetStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zkprover::v1::GetStatusRequest* request, ::zkprover::v1::GetStatusResponse* response) { return this->GetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::experimental::MessageAllocator< ::zkprover::v1::GetStatusRequest, ::zkprover::v1::GetStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zkprover::v1::GetStatusRequest, ::zkprover::v1::GetStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GenProof() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zkprover::v1::GenProofRequest, ::zkprover::v1::GenProofResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zkprover::v1::GenProofRequest* request, ::zkprover::v1::GenProofResponse* response) { return this->GenProof(context, request, response); }));}
    void SetMessageAllocatorFor_GenProof(
        ::grpc::experimental::MessageAllocator< ::zkprover::v1::GenProofRequest, ::zkprover::v1::GenProofResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zkprover::v1::GenProofRequest, ::zkprover::v1::GenProofResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenProof(
      ::grpc::CallbackServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenProof(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Cancel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zkprover::v1::CancelRequest, ::zkprover::v1::CancelResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zkprover::v1::CancelRequest* request, ::zkprover::v1::CancelResponse* response) { return this->Cancel(context, request, response); }));}
    void SetMessageAllocatorFor_Cancel(
        ::grpc::experimental::MessageAllocator< ::zkprover::v1::CancelRequest, ::zkprover::v1::CancelResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zkprover::v1::CancelRequest, ::zkprover::v1::CancelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Cancel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProof() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetProof(context); }));
    }
    ~ExperimentalWithCallbackMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::v1::GetProofResponse, ::zkprover::v1::GetProofRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* GetProof(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::zkprover::v1::GetProofRequest, ::zkprover::v1::GetProofResponse>* GetProof(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_GenProof<ExperimentalWithCallbackMethod_Cancel<ExperimentalWithCallbackMethod_GetProof<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_GenProof<ExperimentalWithCallbackMethod_Cancel<ExperimentalWithCallbackMethod_GetProof<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenProof() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Cancel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProof() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::v1::GetProofResponse, ::zkprover::v1::GetProofRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenProof() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenProof(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Cancel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProof() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::v1::GetProofResponse, ::zkprover::v1::GetProofRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProof(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GenProof() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenProof(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenProof(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenProof(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Cancel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Cancel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Cancel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProof() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetProof(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProof(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::zkprover::v1::GetProofResponse, ::zkprover::v1::GetProofRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetProof(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetProof(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zkprover::v1::GetStatusRequest, ::zkprover::v1::GetStatusResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::zkprover::v1::GetStatusRequest, ::zkprover::v1::GetStatusResponse>* streamer) {
                       return this->StreamedGetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GetStatusRequest* /*request*/, ::zkprover::v1::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zkprover::v1::GetStatusRequest,::zkprover::v1::GetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenProof : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenProof() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zkprover::v1::GenProofRequest, ::zkprover::v1::GenProofResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::zkprover::v1::GenProofRequest, ::zkprover::v1::GenProofResponse>* streamer) {
                       return this->StreamedGenProof(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenProof() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenProof(::grpc::ServerContext* /*context*/, const ::zkprover::v1::GenProofRequest* /*request*/, ::zkprover::v1::GenProofResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenProof(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zkprover::v1::GenProofRequest,::zkprover::v1::GenProofResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Cancel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::zkprover::v1::CancelRequest, ::zkprover::v1::CancelResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::zkprover::v1::CancelRequest, ::zkprover::v1::CancelResponse>* streamer) {
                       return this->StreamedCancel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* /*context*/, const ::zkprover::v1::CancelRequest* /*request*/, ::zkprover::v1::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zkprover::v1::CancelRequest,::zkprover::v1::CancelResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GenProof<WithStreamedUnaryMethod_Cancel<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GenProof<WithStreamedUnaryMethod_Cancel<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace zkprover


#endif  // GRPC_zk_5fprover_2eproto__INCLUDED
